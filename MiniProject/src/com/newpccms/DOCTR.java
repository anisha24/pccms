    package com.newpccms;

import com.placeholder.PlaceHolder;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.DriverManager;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import javax.swing.*;
import java.awt.*;
import static java.awt.JobAttributes.DestinationType.FILE;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;
    import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Chunk;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.DottedLineSeparator;

/**
 *
 * @author ANISH ARALIKATTI
 */
public class DOCTR extends javax.swing.JFrame 
{
    int vi_int;
    int ti_int;
    int si_int;
    int doci;
    int counter = 0;
    int sys_flag = 0;
    PlaceHolder p1;
    PlaceHolder p2;
    PlaceHolder p3;
    PlaceHolder p4;
    
     String FILE = "D:\\pccms-pdfs\\ttteee.pdf";
     Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 20,
            Font.BOLD);
     Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
     Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 14,
            Font.BOLD);
    Font small = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.NORMAL);
     Font smallB = new Font(Font.FontFamily.TIMES_ROMAN, 14,
            Font.NORMAL);
     Font smal = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL);
     Font sma = new Font(Font.FontFamily.TIMES_ROMAN, 11,
            Font.NORMAL);
     Font sm = new Font(Font.FontFamily.TIMES_ROMAN, 10,
            Font.NORMAL);
     

    public DOCTR() {
        initComponents();
        patient_log_tp.setBackground(new Color(255,255,255,235));
        current_med.setBackground(new Color(255,255,255,235));
         past_med.setBackground(new Color(255,255,255,235));
          past_test.setBackground(new Color(255,255,255,235));
        past_scan.setBackground(new Color(255,255,255,235));
        demo.setBackground(new Color(255,255,255,235));
         jPanel1.setBackground(new Color(255,255,255,235));
          jPanel2.setBackground(new Color(255,255,255,235));
           jPanel3.setBackground(new Color(255,255,255,235));
           p1=new PlaceHolder(upl_tf,"Mention source path");
           p2=new PlaceHolder(syn_tf,"Comments");
           p3=new PlaceHolder(upload_lab,"Mention source path");
           p4=new PlaceHolder(synops_lab,"Mention synopsis");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        popupMenu1 = new java.awt.PopupMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        patient_log_tp = new javax.swing.JTabbedPane();
        demo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        nam = new javax.swing.JLabel();
        age = new javax.swing.JLabel();
        dob = new javax.swing.JLabel();
        add = new javax.swing.JLabel();
        gen = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();
        hei = new javax.swing.JLabel();
        wei = new javax.swing.JLabel();
        all = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        v_id = new javax.swing.JLabel();
        symp_t = new javax.swing.JLabel();
        med_pres_parent = new javax.swing.JScrollPane();
        med_pres_table = new javax.swing.JTable();
        med_com_box = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        foll_up = new javax.swing.JTextField();
        add_but = new javax.swing.JButton();
        pres_t = new javax.swing.JCheckBox();
        pres_s = new javax.swing.JCheckBox();
        pre_nt = new javax.swing.JTextField();
        pre_ns = new javax.swing.JTextField();
        rem_but = new javax.swing.JButton();
        morn = new javax.swing.JCheckBox();
        aftr = new javax.swing.JCheckBox();
        even = new javax.swing.JCheckBox();
        dayinfo = new javax.swing.JTextField();
        t_id = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        comments = new javax.swing.JTextArea();
        aiiip = new javax.swing.JLabel();
        current_med = new javax.swing.JPanel();
        dn = new javax.swing.JLabel();
        dv = new javax.swing.JLabel();
        fud = new javax.swing.JLabel();
        pb = new javax.swing.JLabel();
        syn = new javax.swing.JLabel();
        doc_name = new javax.swing.JLabel();
        visit_date = new javax.swing.JLabel();
        follow_date = new javax.swing.JLabel();
        prob = new javax.swing.JLabel();
        synop = new javax.swing.JLabel();
        no_recent_visit = new javax.swing.JLabel();
        past_med = new javax.swing.JPanel();
        appointment_parent = new javax.swing.JScrollPane();
        past_appointment = new javax.swing.JTable();
        check_button = new javax.swing.JButton();
        det_pres_but = new javax.swing.JButton();
        appointment_label = new javax.swing.JLabel();
        dov_lab = new javax.swing.JLabel();
        prob_lab = new javax.swing.JLabel();
        docname = new javax.swing.JLabel();
        syn_lab = new javax.swing.JLabel();
        doc_name_dup = new javax.swing.JLabel();
        dov = new javax.swing.JLabel();
        problem = new javax.swing.JLabel();
        synopsis = new javax.swing.JLabel();
        table_parent_1 = new javax.swing.JScrollPane();
        med_details = new javax.swing.JTable();
        med_lab = new javax.swing.JLabel();
        no_records = new javax.swing.JLabel();
        no_prescription = new javax.swing.JLabel();
        past_test = new javax.swing.JPanel();
        past_test_parent = new javax.swing.JScrollPane();
        past_test_table = new javax.swing.JTable();
        past_test_label = new javax.swing.JLabel();
        view_test_button = new javax.swing.JButton();
        test_doc = new javax.swing.JLabel();
        test_dos = new javax.swing.JLabel();
        test_dot = new javax.swing.JLabel();
        test_type = new javax.swing.JLabel();
        test_syno = new javax.swing.JLabel();
        test_doc_name = new javax.swing.JLabel();
        test_doc_type = new javax.swing.JLabel();
        test_date = new javax.swing.JLabel();
        test_suggested_date = new javax.swing.JLabel();
        test_synopsis = new javax.swing.JLabel();
        test_report_button = new javax.swing.JButton();
        no_records_test = new javax.swing.JLabel();
        past_scan = new javax.swing.JPanel();
        past_scan_parent = new javax.swing.JScrollPane();
        past_scan_table = new javax.swing.JTable();
        check_but = new javax.swing.JButton();
        past_scan_lab = new javax.swing.JLabel();
        docn = new javax.swing.JLabel();
        scann = new javax.swing.JLabel();
        scan_dos = new javax.swing.JLabel();
        scan_sd = new javax.swing.JLabel();
        scan_syn = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        scan_date = new javax.swing.JLabel();
        scan_sugges_date = new javax.swing.JLabel();
        scan_synop = new javax.swing.JLabel();
        scan_det_report = new javax.swing.JButton();
        scan_type = new javax.swing.JLabel();
        scan_doc = new javax.swing.JLabel();
        no_past_scan = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        upload_lab = new javax.swing.JTextField();
        uplo_te_but = new javax.swing.JButton();
        past_upload_parent = new javax.swing.JScrollPane();
        past_upload_table = new javax.swing.JTable();
        no_pending_tests = new javax.swing.JLabel();
        past_test_lab = new javax.swing.JLabel();
        synops_lab = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        past_scan_up_parent = new javax.swing.JScrollPane();
        past_scan_up_table = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        upl_tf = new javax.swing.JTextField();
        syn_tf = new javax.swing.JTextField();
        sc_up_bu = new javax.swing.JButton();
        past_sc_la = new javax.swing.JLabel();
        no_pe_sc = new javax.swing.JLabel();
        uname = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        p_id = new javax.swing.JLabel();
        phn = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        impid = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        piiid = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("USERNAME:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, 27));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("DOCTOR ID :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 100, 27));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("NAME :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 74, 27));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("PHONE :");
        jLabel4.setMaximumSize(new java.awt.Dimension(53, 19));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 60, 27));

        patient_log_tp.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        patient_log_tp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patient_log_tp.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                patient_log_tpMouseMoved(evt);
            }
        });

        demo.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("NAME :");
        demo.add(jLabel5);
        jLabel5.setBounds(56, 34, 186, 26);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("AGE :");
        demo.add(jLabel6);
        jLabel6.setBounds(56, 71, 186, 26);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("DATE OF BIRTH :");
        demo.add(jLabel7);
        jLabel7.setBounds(56, 104, 186, 27);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("ADDRESS :");
        demo.add(jLabel8);
        jLabel8.setBounds(56, 137, 186, 24);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("GENDER :");
        demo.add(jLabel9);
        jLabel9.setBounds(56, 167, 186, 26);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("HEIGHT :");
        demo.add(jLabel11);
        jLabel11.setBounds(56, 235, 186, 23);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("ALLERGIES :");
        demo.add(jLabel13);
        jLabel13.setBounds(56, 299, 186, 24);

        nam.setBackground(new java.awt.Color(255, 255, 255));
        nam.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        demo.add(nam);
        nam.setBounds(260, 34, 430, 26);

        age.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        demo.add(age);
        age.setBounds(260, 71, 430, 26);
        demo.add(dob);
        dob.setBounds(260, 103, 430, 28);
        demo.add(add);
        add.setBounds(260, 137, 430, 24);
        demo.add(gen);
        gen.setBounds(260, 167, 430, 26);
        demo.add(bg);
        bg.setBounds(260, 199, 430, 25);
        demo.add(hei);
        hei.setBounds(260, 234, 430, 24);
        demo.add(wei);
        wei.setBounds(260, 270, 430, 24);
        demo.add(all);
        all.setBounds(260, 299, 430, 24);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("BLOOD GROUP :");
        demo.add(jLabel15);
        jLabel15.setBounds(56, 199, 186, 25);

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel24.setText("WEIGHT :");
        demo.add(jLabel24);
        jLabel24.setBounds(56, 269, 186, 24);

        patient_log_tp.addTab("DEMOGRAPHICS", demo);

        jPanel1.setLayout(null);
        jPanel1.add(v_id);
        v_id.setBounds(950, 50, 150, 30);

        symp_t.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(symp_t);
        symp_t.setBounds(150, 20, 510, 40);

        med_pres_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE ID", "MEDICINE NAME", "DOSAGE", "DURATION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        med_pres_parent.setViewportView(med_pres_table);

        jPanel1.add(med_pres_parent);
        med_pres_parent.setBounds(40, 120, 860, 110);

        med_com_box.setEditable(true);
        med_com_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                med_com_boxActionPerformed(evt);
            }
        });
        jPanel1.add(med_com_box);
        med_com_box.setBounds(40, 290, 360, 30);

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("ADD MEDICATION");
        jPanel1.add(jLabel18);
        jLabel18.setBounds(40, 260, 860, 20);

        foll_up.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        foll_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foll_upActionPerformed(evt);
            }
        });
        jPanel1.add(foll_up);
        foll_up.setBounds(40, 400, 370, 40);

        add_but.setText("ADD");
        add_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_butActionPerformed(evt);
            }
        });
        jPanel1.add(add_but);
        add_but.setBounds(280, 330, 360, 30);

        pres_t.setText("PRESCRIBE TEST");
        pres_t.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pres_tActionPerformed(evt);
            }
        });
        jPanel1.add(pres_t);
        pres_t.setBounds(40, 450, 150, 30);

        pres_s.setText("PRESCRIBE SCAN");
        pres_s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pres_sActionPerformed(evt);
            }
        });
        jPanel1.add(pres_s);
        pres_s.setBounds(40, 490, 140, 30);
        jPanel1.add(pre_nt);
        pre_nt.setBounds(200, 450, 210, 30);
        jPanel1.add(pre_ns);
        pre_ns.setBounds(200, 490, 210, 30);

        rem_but.setText("REMOVE MEDICATION");
        rem_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rem_butActionPerformed(evt);
            }
        });
        jPanel1.add(rem_but);
        rem_but.setBounds(920, 190, 180, 40);

        morn.setText("MORNING");
        morn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(morn);
        morn.setBounds(420, 290, 90, 30);

        aftr.setText("AFTERNOON");
        aftr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(aftr);
        aftr.setBounds(530, 290, 110, 30);

        even.setText("EVENING");
        jPanel1.add(even);
        even.setBounds(670, 290, 100, 30);
        jPanel1.add(dayinfo);
        dayinfo.setBounds(780, 290, 120, 30);
        jPanel1.add(t_id);
        t_id.setBounds(950, 10, 150, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("PROBLEM:");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(23, 20, 100, 40);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("PRESCRIBED MEDICATION");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(40, 90, 860, 20);

        comments.setColumns(20);
        comments.setLineWrap(true);
        comments.setRows(5);
        jScrollPane1.setViewportView(comments);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(520, 400, 380, 120);
        jPanel1.add(aiiip);
        aiiip.setBounds(950, 98, 150, 30);

        patient_log_tp.addTab("PRESCRIBE TREATMENT", jPanel1);

        current_med.setEnabled(false);
        current_med.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        current_med.setLayout(null);

        dn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dn.setText("DOCTOR NAME :");
        current_med.add(dn);
        dn.setBounds(48, 38, 150, 25);

        dv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dv.setText("DATE OF VISIT :");
        current_med.add(dv);
        dv.setBounds(50, 80, 150, 30);

        fud.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fud.setText("FOLLOW UP DATE :");
        current_med.add(fud);
        fud.setBounds(48, 131, 150, 17);

        pb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pb.setText("PROBLEM :");
        current_med.add(pb);
        pb.setBounds(48, 166, 150, 17);

        syn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        syn.setText("SYNOPSIS :");
        current_med.add(syn);
        syn.setBounds(48, 194, 150, 17);
        current_med.add(doc_name);
        doc_name.setBounds(216, 38, 307, 25);
        current_med.add(visit_date);
        visit_date.setBounds(216, 81, 307, 32);
        current_med.add(follow_date);
        follow_date.setBounds(216, 131, 307, 17);
        current_med.add(prob);
        prob.setBounds(216, 166, 307, 17);
        current_med.add(synop);
        synop.setBounds(216, 194, 307, 17);

        no_recent_visit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_recent_visit.setText("NO RECENT MEDICATION");
        current_med.add(no_recent_visit);
        no_recent_visit.setBounds(390, 170, 327, 31);

        patient_log_tp.addTab("CURRENT MEDICATION", current_med);

        past_med.setLayout(null);

        past_appointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "VISIT ID", "DATE", "DOCTOR", "PROBLEM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_appointment.setShowHorizontalLines(false);
        past_appointment.setShowVerticalLines(false);
        past_appointment.getTableHeader().setReorderingAllowed(false);
        appointment_parent.setViewportView(past_appointment);
        if (past_appointment.getColumnModel().getColumnCount() > 0) {
            past_appointment.getColumnModel().getColumn(2).setResizable(false);
            past_appointment.getColumnModel().getColumn(3).setResizable(false);
        }

        past_med.add(appointment_parent);
        appointment_parent.setBounds(260, 50, 636, 100);

        check_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        check_button.setText("CHECK");
        check_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_buttonActionPerformed(evt);
            }
        });
        past_med.add(check_button);
        check_button.setBounds(530, 150, 75, 25);

        det_pres_but.setText("GET DETAILED PRESCRIPTION");
        det_pres_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                det_pres_butActionPerformed(evt);
            }
        });
        past_med.add(det_pres_but);
        det_pres_but.setBounds(410, 400, 230, 62);

        appointment_label.setText("SELECT THE PAST APPOINTMENT YOU WANT TO SEE");
        past_med.add(appointment_label);
        appointment_label.setBounds(430, 10, 321, 31);

        dov_lab.setText("DATE OF VISIT");
        past_med.add(dov_lab);
        dov_lab.setBounds(40, 250, 90, 14);

        prob_lab.setText("PROBLEM");
        past_med.add(prob_lab);
        prob_lab.setBounds(40, 290, 70, 14);

        docname.setText("DOCTOR NAME");
        past_med.add(docname);
        docname.setBounds(40, 210, 90, 14);

        syn_lab.setText("SYNOPSIS");
        past_med.add(syn_lab);
        syn_lab.setBounds(40, 330, 70, 14);
        past_med.add(doc_name_dup);
        doc_name_dup.setBounds(170, 200, 200, 30);
        past_med.add(dov);
        dov.setBounds(170, 240, 200, 30);
        past_med.add(problem);
        problem.setBounds(170, 280, 200, 30);
        past_med.add(synopsis);
        synopsis.setBounds(170, 320, 200, 30);

        med_details.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Dosage", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        med_details.getTableHeader().setReorderingAllowed(false);
        table_parent_1.setViewportView(med_details);

        past_med.add(table_parent_1);
        table_parent_1.setBounds(480, 240, 500, 100);

        med_lab.setText("MEDICINE DETAILS");
        past_med.add(med_lab);
        med_lab.setBounds(660, 210, 120, 14);

        no_records.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_records.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_records.setText("NO PAST MEDICATION RECORDS");
        past_med.add(no_records);
        no_records.setBounds(360, 170, 440, 70);

        no_prescription.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        no_prescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_prescription.setText("NO MEDICINES PRESCRIBED");
        past_med.add(no_prescription);
        no_prescription.setBounds(620, 250, 250, 40);

        patient_log_tp.addTab("PAST MEDICATION", past_med);

        past_test.setLayout(null);

        past_test_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEST ID", "TEST", "DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_test_table.getTableHeader().setReorderingAllowed(false);
        past_test_parent.setViewportView(past_test_table);
        if (past_test_table.getColumnModel().getColumnCount() > 0) {
            past_test_table.getColumnModel().getColumn(0).setResizable(false);
            past_test_table.getColumnModel().getColumn(1).setResizable(false);
        }

        past_test.add(past_test_parent);
        past_test_parent.setBounds(20, 50, 550, 330);

        past_test_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        past_test_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        past_test_label.setText("PAST TESTS");
        past_test.add(past_test_label);
        past_test_label.setBounds(180, 10, 227, 43);

        view_test_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        view_test_button.setText("VIEW TEST RESULTS");
        view_test_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_test_buttonActionPerformed(evt);
            }
        });
        past_test.add(view_test_button);
        view_test_button.setBounds(190, 400, 200, 40);

        test_doc.setText("DOCTOR'S NAME");
        past_test.add(test_doc);
        test_doc.setBounds(690, 80, 100, 20);

        test_dos.setText("SUGGESTED DATE");
        past_test.add(test_dos);
        test_dos.setBounds(690, 170, 100, 20);

        test_dot.setText("DATE OF TEST");
        past_test.add(test_dot);
        test_dot.setBounds(690, 140, 90, 20);

        test_type.setText("TEST TYPE");
        past_test.add(test_type);
        test_type.setBounds(690, 110, 90, 20);

        test_syno.setText("SYNOPSIS");
        past_test.add(test_syno);
        test_syno.setBounds(690, 200, 90, 20);
        past_test.add(test_doc_name);
        test_doc_name.setBounds(810, 80, 190, 20);
        past_test.add(test_doc_type);
        test_doc_type.setBounds(810, 110, 190, 20);
        past_test.add(test_date);
        test_date.setBounds(810, 140, 190, 20);
        past_test.add(test_suggested_date);
        test_suggested_date.setBounds(810, 170, 190, 20);
        past_test.add(test_synopsis);
        test_synopsis.setBounds(810, 200, 190, 20);

        test_report_button.setText("SEE REPORT");
        test_report_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                test_report_buttonActionPerformed(evt);
            }
        });
        past_test.add(test_report_button);
        test_report_button.setBounds(750, 240, 150, 23);

        no_records_test.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_records_test.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_records_test.setText("NO PAST TEST RECORDS");
        past_test.add(no_records_test);
        no_records_test.setBounds(340, 150, 450, 80);

        patient_log_tp.addTab("PAST TESTS", past_test);

        past_scan.setLayout(null);

        past_scan_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SCAN ID", "DATE", "SCAN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_scan_table.getTableHeader().setReorderingAllowed(false);
        past_scan_parent.setViewportView(past_scan_table);

        past_scan.add(past_scan_parent);
        past_scan_parent.setBounds(25, 75, 487, 313);

        check_but.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        check_but.setText("CHECK");
        check_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_butActionPerformed(evt);
            }
        });
        past_scan.add(check_but);
        check_but.setBounds(159, 406, 178, 40);

        past_scan_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        past_scan_lab.setText("PAST SCANS");
        past_scan.add(past_scan_lab);
        past_scan_lab.setBounds(139, 41, 239, 23);

        docn.setText("DOCTOR'S NAME");
        past_scan.add(docn);
        docn.setBounds(577, 117, 90, 14);

        scann.setText("SCAN TYPE");
        past_scan.add(scann);
        scann.setBounds(577, 149, 70, 20);

        scan_dos.setText("DATE OF SCAN");
        past_scan.add(scan_dos);
        scan_dos.setBounds(577, 187, 90, 22);

        scan_sd.setText("SUGGESTED DATE");
        past_scan.add(scan_sd);
        scan_sd.setBounds(577, 227, 100, 14);

        scan_syn.setText("SYNOPSIS");
        past_scan.add(scan_syn);
        scan_syn.setBounds(577, 266, 80, 14);
        past_scan.add(jLabel21);
        jLabel21.setBounds(1031, 109, 179, 0);
        past_scan.add(jLabel22);
        jLabel22.setBounds(1210, 149, 0, 0);
        past_scan.add(scan_date);
        scan_date.setBounds(750, 180, 215, 22);
        past_scan.add(scan_sugges_date);
        scan_sugges_date.setBounds(750, 220, 215, 20);
        past_scan.add(scan_synop);
        scan_synop.setBounds(750, 260, 215, 23);

        scan_det_report.setText("SEE DETAILED REPORT");
        scan_det_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scan_det_reportActionPerformed(evt);
            }
        });
        past_scan.add(scan_det_report);
        scan_det_report.setBounds(725, 322, 190, 23);
        past_scan.add(scan_type);
        scan_type.setBounds(750, 150, 215, 20);
        past_scan.add(scan_doc);
        scan_doc.setBounds(750, 110, 215, 22);

        no_past_scan.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_past_scan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_past_scan.setText("NO PAST SCAN RECORDS");
        past_scan.add(no_past_scan);
        no_past_scan.setBounds(420, 200, 271, 29);

        patient_log_tp.addTab("PAST SCANS", past_scan);

        uplo_te_but.setText("UPLOAD");
        uplo_te_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uplo_te_butActionPerformed(evt);
            }
        });

        past_upload_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEST ID", "TEST TYPE", "SUGGESTED DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_upload_parent.setViewportView(past_upload_table);

        no_pending_tests.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_pending_tests.setText("NO PENDING TESTS TO UPLOAD");

        past_test_lab.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        past_test_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        past_test_lab.setText("PAST TESTS TO UPLOAD");

        synops_lab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                synops_labFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(past_test_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(past_upload_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(no_pending_tests, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(upload_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(synops_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(441, 441, 441)
                .addComponent(uplo_te_but, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(past_test_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(past_upload_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(no_pending_tests, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(upload_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(synops_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(uplo_te_but, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        patient_log_tp.addTab("ADD NEW TEST REPORT", jPanel2);

        past_scan_up_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SCAN ID", "SCAN TYPE", "SUGGESTED DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_scan_up_parent.setViewportView(past_scan_up_table);

        syn_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syn_tfActionPerformed(evt);
            }
        });

        sc_up_bu.setText("UPLOAD");
        sc_up_bu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sc_up_buActionPerformed(evt);
            }
        });

        past_sc_la.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        past_sc_la.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        past_sc_la.setText("PAST SCAN TO UPLOAD");

        no_pe_sc.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_pe_sc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_pe_sc.setText("NO PENDING SCANS TO UPLOAD");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(493, 493, 493)
                .addComponent(jLabel14))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(past_scan_up_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(past_sc_la, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(no_pe_sc, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(upl_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(syn_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(sc_up_bu, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel14)
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(past_scan_up_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(past_sc_la, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(no_pe_sc, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(upl_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(syn_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(sc_up_bu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        patient_log_tp.addTab("ADD NEW SCAN REPORT", jPanel3);

        getContentPane().add(patient_log_tp, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 1280, 550));
        getContentPane().add(uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 260, 27));

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, -1, 22));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/newpccms/logo.jpg"))); // NOI18N
        jLabel17.setText("jLabel17");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 120));
        getContentPane().add(p_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 10, 267, 26));

        phn.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(phn, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, 267, 27));
        getContentPane().add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 260, 27));
        getContentPane().add(impid, new org.netbeans.lib.awtextra.AbsoluteConstraints(814, 48, 85, 19));

        jButton2.setText("FINISH TREATMENT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 10, 180, -1));

        piiid.setForeground(new java.awt.Color(240, 240, 240));
        piiid.setEnabled(false);
        getContentPane().add(piiid, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 100, 50, 20));

        jButton1.setText("REFRESH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 100, 120, -1));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/newpccms/rsz_blur-chart-check-up-415779.jpg"))); // NOI18N
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void appointment_dateInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_appointment_dateInputMethodTextChanged
      System.out.println(evt.paramString());
    }//GEN-LAST:event_appointment_dateInputMethodTextChanged

    private void appointment_dateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_appointment_dateKeyTyped
       System.out.println(evt.getID());
    }//GEN-LAST:event_appointment_dateKeyTyped

    private void appointment_datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_appointment_datePropertyChange
       
    }//GEN-LAST:event_appointment_datePropertyChange

    private void appointment_dateVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_appointment_dateVetoableChange
       
    }//GEN-LAST:event_appointment_dateVetoableChange

    private void patient_log_tpMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patient_log_tpMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_patient_log_tpMouseMoved

    private void scan_det_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scan_det_reportActionPerformed

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="Select report from scan where sid = "+si_int+";";
            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_scan.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_scan.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_scan_det_reportActionPerformed

    private void check_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_butActionPerformed

        int r = past_scan_table.getSelectedRow();
        String re = past_scan_table.getModel().getValueAt(r,0).toString();
        String vi = re.substring(2);
        si_int = Integer.parseInt(vi);

        int res = 1;

        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="call scan_detail("+si_int+");";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                String r1=rs.getString(1);
                String r2=rs.getString(2);
                String r3=rs.getString(3);
                String r4=rs.getString(4);
                String r5=rs.getString(5);
                scan_doc.setText(r1);
                scan_type.setText(r2);
                scan_date.setText(r3);
                scan_sugges_date.setText(r4);
                scan_synop.setText(r5);
            }

            String qw = "select isnull(report) from scan where sid  = "+si_int+";";
            rs= stmt.executeQuery(qw);
            while(rs.next())
            {
                res = rs.getInt(1);
            }
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        if(res == 0)
        scan_det_report.setVisible(true);
        else
        scan_det_report.setVisible(false);

        docn.setVisible(true);
        scann.setVisible(true);
        scan_dos.setVisible(true);
        scan_sd.setVisible(true);
        scan_syn.setVisible(true);
        scan_doc.setVisible(true);
        scan_type.setVisible(true);
        scan_date.setVisible(true);
        scan_sugges_date.setVisible(true);
        scan_synop.setVisible(true);
    }//GEN-LAST:event_check_butActionPerformed

    private void test_report_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_test_report_buttonActionPerformed

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="Select pdf_upload from test where testid = "+ti_int+";";
            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_test.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_test.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_test_report_buttonActionPerformed

    private void view_test_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_test_buttonActionPerformed
        int r = past_test_table.getSelectedRow();
        String re = past_test_table.getModel().getValueAt(r,0).toString();
        String vi = re.substring(1);
        ti_int = Integer.parseInt(vi);

        int res = 1;

        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="call test_selection("+ti_int+");";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                String r1=rs.getString(1);
                String r2=rs.getString(2);
                String r3=rs.getString(3);
                String r4=rs.getString(4);
                String r5=rs.getString(5);
                test_doc_name.setText(r1);
                test_doc_type.setText(r2);
                test_date.setText(r3);
                test_suggested_date.setText(r4);
                test_synopsis.setText(r5);
            }

            String qw = "select isnull(pdf_upload) from test where testid  = "+ti_int+";";
            rs= stmt.executeQuery(qw);
            while(rs.next())
            {
                res = rs.getInt(1);
            }
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        if(res == 0)
        test_report_button.setVisible(true);
        else
        test_report_button.setVisible(false);

        test_doc.setVisible(true);
        test_type.setVisible(true);
        test_dot.setVisible(true);
        test_dos.setVisible(true);
        test_syno.setVisible(true);
        test_doc_name.setVisible(true);
        test_doc_type.setVisible(true);
        test_date.setVisible(true);
        test_suggested_date.setVisible(true);
        test_synopsis.setVisible(true);
    }//GEN-LAST:event_view_test_buttonActionPerformed

    private void det_pres_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_det_pres_butActionPerformed

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="Select prescription_pdf from treatment where treatment_vid = "+vi_int+";";
            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_prescription.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_prescription.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_det_pres_butActionPerformed

    private void check_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_buttonActionPerformed
        int r = past_appointment.getSelectedRow();
        String re = past_appointment.getModel().getValueAt(r,0).toString();
        String vi = re.substring(2);
        vi_int = Integer.parseInt(vi);

        int res =1;

        DefaultTableModel model = (DefaultTableModel) med_details.getModel();
        if(model.getRowCount()> 0)
        model.setRowCount(0);

        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="call past_details_medicine("+vi_int+");";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                model.addRow(row);
            }

            String qw = "call past_demographics_details("+vi_int+");";
            rs= stmt.executeQuery(qw);
            while(rs.next())
            {
                String dn = rs.getString(1);
                String dv = rs.getString(2);
                String pb = rs.getString(3);
                String sn = rs.getString(4);
                doc_name_dup.setText(dn);
                dov.setText(dv);
                problem.setText(pb);
                synopsis.setText(sn);

            }
            String qs="select isnull(prescription_pdf) from treatment where treatment_vid = "+vi_int+";";
            rs= stmt.executeQuery(qs);
            while(rs.next())
            {
                res = rs.getInt(1);
            }
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        if(res == 0)
        det_pres_but.setVisible(true);
        else
        det_pres_but.setVisible(false);

        if(model.getRowCount() ==  0)
        {
            table_parent_1.setVisible(false);
            med_lab.setVisible(false);
            no_prescription.setVisible(true);
        }
        else
        {
            table_parent_1.setVisible(true);
            med_lab.setVisible(true);
            no_prescription.setVisible(false);
        }

        docname.setVisible(true);
        dov_lab.setVisible(true);
        prob_lab.setVisible(true);
        syn_lab.setVisible(true);
        doc_name_dup.setVisible(true);
        dov.setVisible(true);
        problem.setVisible(true);
        synopsis.setVisible(true);
    }//GEN-LAST:event_check_buttonActionPerformed

    private void add_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_butActionPerformed
        
        //for medicine id
        String medicine = med_com_box.getSelectedItem().toString();
        String nnu = medicine.substring(0,medicine.indexOf("|"));
        int medi = Integer.parseInt(nnu);

        String snnu = medicine.substring(medicine.indexOf("|")+1);

        String m,a,e;
        
        DefaultTableModel model = (DefaultTableModel) med_pres_table.getModel();
        
        if(morn.isSelected() ||morn.isSelected() ||morn.isSelected() )
        {
            
                
                

                if(morn.isSelected())    //for dosage
                    m="1";
                else
                    m="0";
                if(aftr.isSelected())
                    a="1";
                else
                    a="0";
                if(even.isSelected())
                    e="1";
                else
                    e="0";


                String dos = m+a+e ;

                String dai = dayinfo.getText();  //to get no of days

                
                Object[] row = { nnu,snnu,dos,dai  };
                model.addRow(row);
                
                morn.setSelected(false);
                aftr.setSelected(false);
                even.setSelected(false);
                dayinfo.setText("");
                
            
            
            
        }
        else
                JOptionPane.showMessageDialog(null,"Select dosage!");
        
        
        
       
        
        if(model.getRowCount() > 0)
        {
            rem_but.setVisible(true);
        
            med_pres_table.setRowSelectionInterval(0,0);
        }
            
        
    }//GEN-LAST:event_add_butActionPerformed

    private void foll_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foll_upActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_foll_upActionPerformed

    private void pres_tActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pres_tActionPerformed
        String actc =(evt.getActionCommand());
        if(actc == "PRESCRIBE TEST")
        {
            pre_nt.setEnabled(true);
        }
    }//GEN-LAST:event_pres_tActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        DOCTORLOGIN v =new DOCTORLOGIN();
        v.setVisible(true);
        
        v.uname.setText(uname.getText());
        v.name.setText(name.getText());
        v.docid_lab.setText(p_id.getText());    //setting values to doctor login page
        v.phone.setText(phn.getText());
        
        int vv= Integer.parseInt(v_id.getText());  //stores visit id
        int tt= Integer.parseInt(t_id.getText());  //stores treatment id
        int ppii = Integer.parseInt(piiid.getText());  //stores patient id
        int aii = Integer.parseInt(aiiip.getText()); //stores appointment id
        
        DefaultTableModel model = (DefaultTableModel) med_pres_table.getModel();
        DefaultTableModel mode = (DefaultTableModel) v.today_app_table.getModel();
        
        String folup = foll_up.getText();  //stores follow up details
        String findd = comments.getText(); //stores findings 
        
        String un = uname.getText();
        
         int dii = Integer.parseInt(p_id.getText().substring(2));  //stores doctor id
        
        //for loop to insert the medication
        for(int i=0;i<med_pres_table.getRowCount();i++)
        {
            int j=0;
            String mmi= med_pres_table.getModel().getValueAt(i,j++).toString();  //medicine id
            j++;
            String dosi = med_pres_table.getModel().getValueAt(i,j++).toString(); //dosage
            String dui = med_pres_table.getModel().getValueAt(i,j++).toString();  // duration
            
            PreparedStatement ps;
            ResultSet rs;
            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                String a="jdbc:mysql://localhost:3306/pccms";
                Connection con;
                con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
                Statement stmt=(Statement)con.createStatement();
                String quer="insert into medication(med_tid,med_medid,duration,dosage) values ("+tt+","+mmi+",'"+dosi+"','"+dui+"');";
                stmt.executeUpdate(quer);
                
                

            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
        }
        
        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer ="update treatment set follow_up_info = '"+folup+"' where tid = "+tt+";"; 
            String quero="update treatment set summary = '"+findd+"' where tid = "+tt+";";// to update treatment table
            stmt.executeUpdate(quer);
            stmt.executeUpdate(quero);
            
            if(pres_t.isSelected())
            {
                String testype = pre_nt.getText(); 
                String qu="insert into test(test_pid,test_docid,test_tid,suggested_date,test_type,inserted) values ("+ppii+","+dii+","+tt+",curdate(),'"+testype+"',0 );";
                stmt.executeUpdate(qu);
            }
            if(pres_s.isSelected())
            {
                String scantype = pre_ns.getText(); 
                String qu="insert into scan(scan_pid,scan_docid,scan_tid,scan_type,suggested_date,inserted) values ("+ppii+","+dii+","+tt+",'"+scantype+"',curdate(),0 );";
                stmt.executeUpdate(qu);
            }
            String qir = "insert into doctor_bill_info(inv_pid,inv_vid,inv_docid,inv_appid,purpose,date_invoice,amt_due) values ("+ppii+","+vv+","+dii+","+aii+",\"Doctor\'s Visit\",curdate(),400);";
            stmt.executeUpdate(qir);
            
            String wwq = "call todays_appointments("+dii+");";
            rs= stmt.executeQuery(wwq);
            while(rs.next())
            {
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                String s3 = rs.getString(3);
                String s4 = rs.getString(4);
                String s5 = rs.getString(5);
                String s6 = rs.getString(7);
                Object[] row = { s1,s6, s2, s3, s4,s5 };
                mode.addRow(row);
                
                
            }
             String qw = "SELECT * from doc_demo where email='"+un+"';";
            rs = stmt.executeQuery(qw);
            while(rs.next())
            {
                String spec = "";
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                int s3 = rs.getInt(3);
                if(s3 == 1)
                {
                    spec = "GENERAL SPECIALIST";
                }
                else if(s3 == 2)
                {
                     spec = "PEDIATRICIAN";
                }
                else if(s3 == 3)
                {
                     spec = "OPHTHALMOLOGIST";
                }
                else if(s3 == 4)
                {
                     spec = "ENT";
                }
                else if(s3 == 5)
                {
                     spec = "CARDIOLOGIST";
                }
                else if(s3 == 6)
                {
                     spec = "NEUROLOGIST";
                }
                else if(s3 == 7)
                {
                     spec = "ORTHOPEDIC SURGEON";
                }
                else if(s3 == 8)
                {
                     spec = "GASTROENTEROLOGIST";
                }
                else if(s3 == 9)
                {
                     spec = "DENTIST";
                }
                v.nam.setText(s1);
                v.degree.setText(s2);
                v.spec.setText(spec);
                                   
            }
                
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
        
        
        
        if(mode.getRowCount() == 0)
        {
            v.today_appointment_parent.setVisible(false);
            v.tdap.setVisible(false);
            v.see_app_but.setVisible(false);
            v.np_app_today.setVisible(true);
        }
        else
        {
            v.today_app_table.setRowSelectionInterval(0,0);
            v.today_appointment_parent.setVisible(true);
            v.tdap.setVisible(true);
            v.see_app_but.setVisible(true);
            v.np_app_today.setVisible(false);
        }
        
        v.app_dat.getJCalendar().setMinSelectableDate(new Date());
        v.app_dat.setDate(new Date());
        
        close();
        
         try {
            com.itextpdf.text.Document document = new com.itextpdf.text.Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addTitlePage(document,dii);
            
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        PreparedStatement ps;
        FileInputStream inp;
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            String query="update treatment set prescription_pdf = ? where tid ="+tt+";";
            ps = con.prepareStatement(query);            
            File tf = new File(FILE);
            inp = new FileInputStream(tf);
            ps.setBinaryStream(1, inp);
            ps.executeUpdate();


            
        } 
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void med_com_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_med_com_boxActionPerformed
        
        
            
            String st = med_com_box.getSelectedItem().toString();
            //System.out.println(st);
            
            ResultSet rs;
            Statement stmt;
            
            try 
            {
                Class.forName("com.mysql.jdbc.Driver");
                String a="jdbc:mysql://localhost:3306/pccms";
                Connection con;
                con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
                stmt = (Statement) con.createStatement();
                String q ="Select medid, medicine_name from medicine where medicine_name like '"+st+"%';";
                rs = stmt.executeQuery(q);
                
                
                while(rs.next())
                {
                    int mei = rs.getInt(1);
                    String r = rs.getString(2);
                    med_com_box.addItem(mei+"|"+r);
                }

                


            } 
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
            
        
        
            
    }//GEN-LAST:event_med_com_boxActionPerformed

    private void rem_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rem_butActionPerformed
       
        
        DefaultTableModel model = (DefaultTableModel) med_pres_table.getModel();
        int r = med_pres_table.getSelectedRow();
        model.removeRow(r);
        if(model.getRowCount() == 0)
            rem_but.setVisible(false);
        
        
    }//GEN-LAST:event_rem_butActionPerformed

    private void pres_sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pres_sActionPerformed
       String actc =(evt.getActionCommand());
        if(actc == "PRESCRIBE SCAN")
        {
            pre_ns.setEnabled(true);
        }
        
    }//GEN-LAST:event_pres_sActionPerformed

    private void synops_labFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_synops_labFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_synops_labFocusGained

    private void syn_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syn_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_syn_tfActionPerformed

    private void uplo_te_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uplo_te_butActionPerformed
        
        int r = past_upload_table.getSelectedRow();
        int ti = Integer.parseInt(past_upload_table.getModel().getValueAt(r,0).toString());
        
        String ss = synops_lab.getText();
        
        int pid = Integer.parseInt(piiid.getText());
        int dii = Integer.parseInt(p_id.getText().substring(2)); //docid
        
        DefaultTableModel m = (DefaultTableModel) past_upload_table.getModel();
        m.setRowCount(0);
        
        ResultSet rs;
        PreparedStatement ps;
        FileInputStream inp;
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            String query="update test set date_of_test = curdate() ,synopsis = '"+ss+"' ,pdf_upload = ? ,inserted = 1 where testid ="+ti+";";
            ps = con.prepareStatement(query);   
            String up = upload_lab.getText();
            File tf = new File(up);
            inp = new FileInputStream(tf);
            ps.setBinaryStream(1, inp);
            ps.executeUpdate();

            Statement stmt = (Statement)con.createStatement();
            String dde = "call upload_test("+pid+","+dii+");";
            rs = stmt.executeQuery(dde);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                m.addRow(row);
            }
            
        } 
        catch (ClassNotFoundException | IOException | SQLException  ex )
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(m.getRowCount() == 0)
        {
            past_test_lab.setVisible(false);
            past_upload_parent.setVisible(false);
            upload_lab.setVisible(false);
            synops_lab.setVisible(false);
            uplo_te_but.setVisible(false);
            no_pending_tests.setVisible(true);
        }
        else
        {
            past_test_lab.setVisible(true);
            past_upload_parent.setVisible(true);
            upload_lab.setVisible(true);
            synops_lab.setVisible(true);
            uplo_te_but.setVisible(true);
            no_pending_tests.setVisible(false);
             past_upload_table.setRowSelectionInterval(0,0);
        }
    }//GEN-LAST:event_uplo_te_butActionPerformed

    private void sc_up_buActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sc_up_buActionPerformed
        
        int r = past_scan_up_table.getSelectedRow();
        int ti = Integer.parseInt(past_scan_up_table.getModel().getValueAt(r,0).toString());
        
        String ss = syn_tf.getText();
        
        int pid = Integer.parseInt(piiid.getText());
        int dii = Integer.parseInt(p_id.getText().substring(2)); //docid
        
        DefaultTableModel m = (DefaultTableModel) past_scan_up_table.getModel();
        m.setRowCount(0);
        
        ResultSet rs;
        PreparedStatement ps;
        FileInputStream inp;
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            String query="update scan set date_of_scan = curdate() ,synopsis = '"+ss+"' ,report = ? ,inserted = 1 where sid ="+ti+";";
            ps = con.prepareStatement(query);   
            String up = upl_tf.getText();
            File tf = new File(up);
            inp = new FileInputStream(tf);
            ps.setBinaryStream(1, inp);
            ps.executeUpdate();

            Statement stmt = (Statement)con.createStatement();
            String dde = "call upload_scan("+pid+","+dii+");";
            rs = stmt.executeQuery(dde);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                m.addRow(row);
            }
            
        } 
        catch (ClassNotFoundException | IOException | SQLException  ex )
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(m.getRowCount() == 0)
        {
            past_sc_la.setVisible(false);
            past_scan_up_parent.setVisible(false);
            upl_tf.setVisible(false);
            syn_tf.setVisible(false);
            sc_up_bu.setVisible(false);
            no_pe_sc.setVisible(true);
            
            
            
        }
        else
        {
            past_sc_la.setVisible(true);
            past_scan_up_parent.setVisible(true);
            upl_tf.setVisible(true);
            syn_tf.setVisible(true);
            sc_up_bu.setVisible(true);
            no_pe_sc.setVisible(false);
            past_scan_up_table.setRowSelectionInterval(0,0);
            
        }
    }//GEN-LAST:event_sc_up_buActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        int flag =0;
        // System.out.println("here");
          //patient id of the selected patient
        
        int pid  = Integer.parseInt(piiid.getText()); //setting patient id to next page
        
        int apid = Integer.parseInt(aiiip.getText());  //appointment id of the patient
        String viid; //for storing the visit id
        int vii=0;
        
        String tiid;
        int tii=0;
        
        int dii = Integer.parseInt(p_id.getText().substring(2)); //docid

        aiiip.setVisible(false);

        dov_lab.setVisible(false);
        prob_lab.setVisible(false);
        syn_lab.setVisible(false);
        doc_name_dup.setVisible(false);
        dov.setVisible(false);
        problem.setVisible(false);
        synopsis.setVisible(false);
        med_lab.setVisible(false);
        table_parent_1.setVisible(false);
        det_pres_but.setVisible(false);
        no_prescription.setVisible(false);
        docname.setVisible(false);

        //test page

        test_doc.setVisible(false);
        test_type.setVisible(false);
        test_dot.setVisible(false);
        test_dos.setVisible(false);
        test_syno.setVisible(false);
        test_doc_name.setVisible(false);
        test_doc_type.setVisible(false);
        test_date.setVisible(false);
        test_suggested_date.setVisible(false);
        test_synopsis.setVisible(false);
        test_report_button.setVisible(false);
        no_records_test.setVisible(false);

        //scan page

        docn.setVisible(false);
        scann.setVisible(false);
        scan_dos.setVisible(false);
        scan_sd.setVisible(false);
        scan_syn.setVisible(false);
        scan_doc.setVisible(false);
        scan_type.setVisible(false);
        scan_date.setVisible(false);
        scan_sugges_date.setVisible(false);
        scan_synop.setVisible(false);
        scan_det_report.setVisible(false);

        DefaultTableModel model = (DefaultTableModel) past_appointment.getModel();
        
        DefaultTableModel mod = (DefaultTableModel) past_test_table.getModel();
        DefaultTableModel mo = (DefaultTableModel) past_scan_table.getModel();
        DefaultTableModel m = (DefaultTableModel) past_upload_table.getModel();
        DefaultTableModel md = (DefaultTableModel) past_scan_up_table.getModel();
        
        
        m.setRowCount(0);
        md.setRowCount(0);
        mod.setRowCount(0);
        mo.setRowCount(0);

        PreparedStatement ps;
        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            
            String pi=impid.getText();
            
            
            

            
            

            String qwer= "call past_test_display("+pid+");";  //for past test table
            rs=stmt.executeQuery(qwer);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                mod.addRow(row);
            }

            String qweq= "call past_scan("+pid+");";   // for past scan table
            rs=stmt.executeQuery(qweq);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                mo.addRow(row);
            }
            String qtt ="select isnull(t.prescription_pdf) from treatment t, visit v, patient p where v.vid = t.treatment_vid and p.pid = v.vis_pid and p.pid="+pid+";";   // used for testing whether pdf is there or not for enabling the button
            rs=stmt.executeQuery(qtt);
            if(rs.next())
            {
                int i = rs.getInt(1);
                if(i==1)
                flag =1;
            }
            

            

            

            
            
            
            
            
            String dde = "call upload_test("+pid+","+dii+");";
            rs = stmt.executeQuery(dde);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                m.addRow(row);
            }
            String ddde = "call upload_scan("+pid+","+dii+");";
            rs = stmt.executeQuery(ddde);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                md.addRow(row);
            }
            
            
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        
        if(md.getRowCount() == 0)
        {
            past_sc_la.setVisible(false);
            past_scan_up_parent.setVisible(false);
            upl_tf.setVisible(false);
            syn_tf.setVisible(false);
            sc_up_bu.setVisible(false);
            no_pe_sc.setVisible(true);
            
            
            
        }
        else
        {
            past_sc_la.setVisible(true);
            past_scan_up_parent.setVisible(true);
            upl_tf.setVisible(true);
            syn_tf.setVisible(true);
            sc_up_bu.setVisible(true);
            no_pe_sc.setVisible(false);
            past_scan_up_table.setRowSelectionInterval(0,0);
            
        }
        
        
        
        if(m.getRowCount() == 0)
        {
            past_test_lab.setVisible(false);
            past_upload_parent.setVisible(false);
            upload_lab.setVisible(false);
            synops_lab.setVisible(false);
            uplo_te_but.setVisible(false);
            no_pending_tests.setVisible(true);
           
        }
        else
        {
            past_test_lab.setVisible(true);
            past_upload_parent.setVisible(true);
            upload_lab.setVisible(true);
            synops_lab.setVisible(true);
            uplo_te_but.setVisible(true);
            no_pending_tests.setVisible(false);
            past_upload_table.setRowSelectionInterval(0,0);
        }
        
        
        
        
        if(mo.getRowCount() == 0)
        {
            past_scan_lab.setVisible(false);
            past_scan_parent.setVisible(false);
            check_but.setVisible(false);
            no_past_scan.setVisible(true);
        }
        else
        {
            past_scan_lab.setVisible(true);
            past_scan_parent.setVisible(true);
            check_but.setVisible(true);
            no_past_scan.setVisible(false);
            past_scan_table.setRowSelectionInterval(0, 0);
        }

        if(mod.getRowCount() == 0)
        {
            past_test_label.setVisible(false);
            past_test_parent.setVisible(false);
            view_test_button.setVisible(false);
            no_records_test.setVisible(true);
        }
        else
        {
            past_test_label.setVisible(true);
            past_test_parent.setVisible(true);
            view_test_button.setVisible(true);
            no_records_test.setVisible(false);
            past_test_table.setRowSelectionInterval(0, 0);
        }
        

        if(model.getRowCount() ==  0)
        {
            appointment_parent.setVisible(false);
            appointment_label.setVisible(false);
            check_button.setVisible(false);
            no_records.setVisible(true);
            dn.setVisible(false);
            dv.setVisible(false);
            fud.setVisible(false);
            pb.setVisible(false);
            syn.setVisible(false);

            
            doc_name.setVisible(false);
            visit_date.setVisible(false);
            follow_date.setVisible(false);
            prob.setVisible(false);
            synop.setVisible(false);

            no_recent_visit.setVisible(true);
        }
        else
        {
            appointment_parent.setVisible(true);
            appointment_label.setVisible(true);
            check_button.setVisible(true);
            no_records.setVisible(false);
            no_recent_visit.setVisible(false);
            past_appointment.setRowSelectionInterval(0,0);
        }
       
        
        pre_nt.setEnabled(false);
        pre_ns.setEnabled(false);
        //v.add_but.setVisible(false);

        piiid.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DOCTR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DOCTR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DOCTR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DOCTR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DOCTR().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel add;
    public javax.swing.JButton add_but;
    public javax.swing.JCheckBox aftr;
    public javax.swing.JLabel age;
    public javax.swing.JLabel aiiip;
    public javax.swing.JLabel all;
    public javax.swing.JLabel appointment_label;
    public javax.swing.JScrollPane appointment_parent;
    public javax.swing.JLabel bg;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JButton check_but;
    public javax.swing.JButton check_button;
    private javax.swing.JTextArea comments;
    public javax.swing.JPanel current_med;
    private javax.swing.JTextField dayinfo;
    public javax.swing.JPanel demo;
    public javax.swing.JButton det_pres_but;
    public javax.swing.JLabel dn;
    public javax.swing.JLabel dob;
    public javax.swing.JLabel doc_name;
    public javax.swing.JLabel doc_name_dup;
    public javax.swing.JLabel docn;
    public javax.swing.JLabel docname;
    public javax.swing.JLabel dov;
    public javax.swing.JLabel dov_lab;
    public javax.swing.JLabel dv;
    public javax.swing.JCheckBox even;
    private javax.swing.JTextField foll_up;
    public javax.swing.JLabel follow_date;
    public javax.swing.JLabel fud;
    public javax.swing.JLabel gen;
    public javax.swing.JLabel hei;
    public javax.swing.JLabel impid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JComboBox<String> med_com_box;
    public javax.swing.JTable med_details;
    public javax.swing.JLabel med_lab;
    public javax.swing.JScrollPane med_pres_parent;
    public javax.swing.JTable med_pres_table;
    public javax.swing.JCheckBox morn;
    public javax.swing.JLabel nam;
    public javax.swing.JLabel name;
    public javax.swing.JLabel no_past_scan;
    public javax.swing.JLabel no_pe_sc;
    public javax.swing.JLabel no_pending_tests;
    public javax.swing.JLabel no_prescription;
    public javax.swing.JLabel no_recent_visit;
    public javax.swing.JLabel no_records;
    public javax.swing.JLabel no_records_test;
    public javax.swing.JLabel p_id;
    public javax.swing.JTable past_appointment;
    public javax.swing.JPanel past_med;
    public javax.swing.JLabel past_sc_la;
    public javax.swing.JPanel past_scan;
    public javax.swing.JLabel past_scan_lab;
    public javax.swing.JScrollPane past_scan_parent;
    public javax.swing.JTable past_scan_table;
    public javax.swing.JScrollPane past_scan_up_parent;
    public javax.swing.JTable past_scan_up_table;
    public javax.swing.JPanel past_test;
    public javax.swing.JLabel past_test_lab;
    public javax.swing.JLabel past_test_label;
    public javax.swing.JScrollPane past_test_parent;
    public javax.swing.JTable past_test_table;
    public javax.swing.JScrollPane past_upload_parent;
    public javax.swing.JTable past_upload_table;
    public javax.swing.JTabbedPane patient_log_tp;
    public javax.swing.JLabel pb;
    public javax.swing.JLabel phn;
    public javax.swing.JLabel piiid;
    private java.awt.PopupMenu popupMenu1;
    public javax.swing.JTextField pre_ns;
    public javax.swing.JTextField pre_nt;
    public javax.swing.JCheckBox pres_s;
    public javax.swing.JCheckBox pres_t;
    public javax.swing.JLabel prob;
    public javax.swing.JLabel prob_lab;
    public javax.swing.JLabel problem;
    public javax.swing.JButton rem_but;
    public javax.swing.JButton sc_up_bu;
    public javax.swing.JLabel scan_date;
    public javax.swing.JButton scan_det_report;
    public javax.swing.JLabel scan_doc;
    public javax.swing.JLabel scan_dos;
    public javax.swing.JLabel scan_sd;
    public javax.swing.JLabel scan_sugges_date;
    public javax.swing.JLabel scan_syn;
    public javax.swing.JLabel scan_synop;
    public javax.swing.JLabel scan_type;
    public javax.swing.JLabel scann;
    public javax.swing.JLabel symp_t;
    public javax.swing.JLabel syn;
    public javax.swing.JLabel syn_lab;
    public javax.swing.JTextField syn_tf;
    public javax.swing.JLabel synop;
    public javax.swing.JTextField synops_lab;
    public javax.swing.JLabel synopsis;
    public javax.swing.JLabel t_id;
    public javax.swing.JScrollPane table_parent_1;
    public javax.swing.JLabel test_date;
    public javax.swing.JLabel test_doc;
    public javax.swing.JLabel test_doc_name;
    public javax.swing.JLabel test_doc_type;
    public javax.swing.JLabel test_dos;
    public javax.swing.JLabel test_dot;
    public javax.swing.JButton test_report_button;
    public javax.swing.JLabel test_suggested_date;
    public javax.swing.JLabel test_syno;
    public javax.swing.JLabel test_synopsis;
    public javax.swing.JLabel test_type;
    public javax.swing.JLabel uname;
    public javax.swing.JTextField upl_tf;
    public javax.swing.JButton uplo_te_but;
    public javax.swing.JTextField upload_lab;
    public javax.swing.JLabel v_id;
    public javax.swing.JButton view_test_button;
    public javax.swing.JLabel visit_date;
    public javax.swing.JLabel wei;
    // End of variables declaration//GEN-END:variables

public void addTitlePage(com.itextpdf.text.Document document, int dii)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        
        ResultSet rs;
            Statement stmt;
            
            String name = null,degree = null,email = null,phone = null;
            
            try 
            {
                Class.forName("com.mysql.jdbc.Driver");
                String a="jdbc:mysql://localhost:3306/pccms";
                Connection con;
                con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
                stmt = (Statement) con.createStatement();
                String q ="Select concat(\"DR.\",fname,\" \",lname), degree,email,phone from doctor where docid = "+dii+" ;";
                rs = stmt.executeQuery(q);
                
                
                while(rs.next())
                {
                    name = rs.getString(1);
                    degree = rs.getString(2);
                    email = rs.getString(3);
                    phone = rs.getString(4);
                    
                }

                


            } 
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
            
        
        
        
        Paragraph paragraph = new Paragraph(name,catFont);
        paragraph.setAlignment(Element.ALIGN_CENTER);
        document.add(paragraph);
        
        Paragraph paragrap = new Paragraph(degree,smallB);
        paragrap.setAlignment(Element.ALIGN_CENTER);
        document.add(paragrap);
        
        
        
        Paragraph parag = new Paragraph(email,sma);
        parag.setAlignment(Element.ALIGN_CENTER);
        document.add(parag);
        
        
        Paragraph para = new Paragraph(phone,sma);
        para.setAlignment(Element.ALIGN_CENTER);
        document.add(para);
        
        DottedLineSeparator dottedline = new DottedLineSeparator();
        dottedline.setOffset(-2);
        dottedline.setGap(2f);
        preface.add(dottedline);
        document.add(preface);
        
        int aa = Integer.parseInt(aiiip.getText());
         String p = piiid.getText();
        String n = nam.getText();
          String a = age.getText();
           String d = dob.getText();
            String ng = gen.getText();
             String nb = bg.getText();
         
        
        
        document.add( Chunk.NEWLINE );
        document.add( Chunk.NEWLINE );
        
        Paragraph ttio = new Paragraph("APPOINTMENT ID: "+aa,sm);
        ttio.setAlignment(Element.ALIGN_LEFT);
        document.add(ttio);
        
        Paragraph par = new Paragraph("PATIENT ID: "+p,sm);
        par.setAlignment(Element.ALIGN_LEFT);
        document.add(par);
        
        Paragraph pa = new Paragraph("PATIENT NAME: "+n,sm);
        pa.setAlignment(Element.ALIGN_LEFT);
        document.add(pa);
        
        Paragraph pq = new Paragraph("PATIENT AGE: "+a,sm);
        pq.setAlignment(Element.ALIGN_LEFT);
        document.add(pq);
        
        Paragraph dde = new Paragraph("PATIENT GENDER: "+ng,sm);
        dde.setAlignment(Element.ALIGN_LEFT);
        document.add(dde);
        
        Paragraph iiiu = new Paragraph("PATIENT BLOOD GROUP: "+nb,sm);
        iiiu.setAlignment(Element.ALIGN_LEFT);
        document.add(iiiu);
        
        document.add( Chunk.NEWLINE );
        document.add( Chunk.NEWLINE );
        
        String cmp = symp_t.getText();
        String cm = comments.getText();
        
        Paragraph prro = new Paragraph("COMPLAINTS: "+cmp,sm);
        prro.setAlignment(Element.ALIGN_LEFT);
        document.add(prro);

       document.add( Chunk.NEWLINE );
       
        Paragraph ddee = new Paragraph("DIAGONOSIS: "+cm,sm);
        ddee.setAlignment(Element.ALIGN_LEFT);
        document.add(ddee);
       document.add( Chunk.NEWLINE );
       document.add( Chunk.NEWLINE );
       Paragraph prroo = new Paragraph("MEDICATION",sm);
        prroo.setAlignment(Element.ALIGN_CENTER);
        document.add(prroo);
       
        
        document.add( Chunk.NEWLINE );
        
        
        PdfPTable table = new PdfPTable(3);

        

        PdfPCell c1 = new PdfPCell(new Phrase("MEDICINE NAME"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("DOSAGE"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("DURATION"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);
        
        
        
        for(int i=0;i<med_pres_table.getRowCount();i++)
        {
            int j=0;
            String re = past_test_table.getModel().getValueAt(i,j++).toString();
            table.addCell(re);
            j++;
            String dosi = med_pres_table.getModel().getValueAt(i,j++).toString(); //dosage
            table.addCell(dosi);
            String dui = med_pres_table.getModel().getValueAt(i,j++).toString();  // duration
            table.addCell(dui);
            
        }

        
       

        document.add(table);
        
        
        
        document.add( Chunk.NEWLINE );
        
        String ppii = pre_nt.getText();
        String ppoii = pre_nt.getText();
        
        Paragraph ddef = new Paragraph("TESTS SUGGESTED: "+ppii,sm);
        ddef.setAlignment(Element.ALIGN_LEFT);
        document.add(ddef);
        document.add( Chunk.NEWLINE );
        
        Paragraph ddefg = new Paragraph("SCANS SUGGESTED: "+ppoii,sm);
        ddefg.setAlignment(Element.ALIGN_LEFT);
        document.add(ddefg);
       

        

       
        // Start a new page
        //document.newPage();
    }
    

    
    public void close()
    {
        WindowEvent winClosingEvent= new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);


    }

}
