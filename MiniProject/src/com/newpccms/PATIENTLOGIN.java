package com.newpccms;

import com.placeholder.PlaceHolder;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.DriverManager;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ANISH ARALIKATTI
 */
public class PATIENTLOGIN extends javax.swing.JFrame 
{
    int vi_int;
    int ti_int;
    int si_int;
    int doci;
    PlaceHolder p1;
    
     

    public PATIENTLOGIN() {
        initComponents();
        
        patient_log_tp.setBackground(new Color(255,255,255,235));
        current_med.setBackground(new Color(255,255,255,235));
        check_symp.setBackground(new Color(255,255,255,235));
        book_app.setBackground(new Color(255,255,255,235));
        jPanel1.setBackground(new Color(255,255,255,235));
        past_med.setBackground(new Color(255,255,255,235));
        past_test.setBackground(new Color(255,255,255,235));
        past_scan.setBackground(new Color(255,255,255,235));
        past_bill.setBackground(new Color(255,255,255,235));
        demo.setBackground(new Color(255,255,255,235));
        p1=new PlaceHolder(problems,"Enter problem/symptoms");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        popupMenu1 = new java.awt.PopupMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        p_id = new javax.swing.JLabel();
        phn = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        impid = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        uname = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        patient_log_tp = new javax.swing.JTabbedPane();
        demo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        nam = new javax.swing.JLabel();
        age = new javax.swing.JLabel();
        dob = new javax.swing.JLabel();
        add = new javax.swing.JLabel();
        gen = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();
        hei = new javax.swing.JLabel();
        wei = new javax.swing.JLabel();
        all = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        current_med1 = new javax.swing.JPanel();
        dn1 = new javax.swing.JLabel();
        dv1 = new javax.swing.JLabel();
        fud1 = new javax.swing.JLabel();
        pb1 = new javax.swing.JLabel();
        syn1 = new javax.swing.JLabel();
        doc_name1 = new javax.swing.JLabel();
        visit_date1 = new javax.swing.JLabel();
        follow_date1 = new javax.swing.JLabel();
        prob1 = new javax.swing.JLabel();
        synop1 = new javax.swing.JLabel();
        treatment_id = new javax.swing.JLabel();
        no_recent_visit1 = new javax.swing.JLabel();
        check_symp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        s = new javax.swing.JList<>();
        jButton8 = new javax.swing.JButton();
        disp = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        may_lab = new javax.swing.JLabel();
        bk = new javax.swing.JButton();
        book_app = new javax.swing.JPanel();
        app_date = new javax.swing.JLabel();
        check_slot = new javax.swing.JButton();
        spe_combox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        search_spec = new javax.swing.JButton();
        see_doc_lab = new javax.swing.JLabel();
        doc_combox = new javax.swing.JComboBox<>();
        doc_search = new javax.swing.JButton();
        available_slots_lab = new javax.swing.JLabel();
        nin = new javax.swing.JRadioButton();
        ten = new javax.swing.JRadioButton();
        ele = new javax.swing.JRadioButton();
        twe = new javax.swing.JRadioButton();
        two = new javax.swing.JRadioButton();
        thr = new javax.swing.JRadioButton();
        fou = new javax.swing.JRadioButton();
        fiv = new javax.swing.JRadioButton();
        appointment_submit = new javax.swing.JButton();
        problems = new javax.swing.JTextField();
        appointment_date = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        upcoming_parent = new javax.swing.JScrollPane();
        upcoming_appointments = new javax.swing.JTable();
        no_app = new javax.swing.JLabel();
        past_med = new javax.swing.JPanel();
        appointment_parent = new javax.swing.JScrollPane();
        past_appointment = new javax.swing.JTable();
        check_button = new javax.swing.JButton();
        det_pres_but = new javax.swing.JButton();
        appointment_label = new javax.swing.JLabel();
        dov_lab = new javax.swing.JLabel();
        prob_lab = new javax.swing.JLabel();
        docname = new javax.swing.JLabel();
        syn_lab = new javax.swing.JLabel();
        doc_name_dup = new javax.swing.JLabel();
        dov_dup = new javax.swing.JLabel();
        prob_dup = new javax.swing.JLabel();
        syn_dup = new javax.swing.JLabel();
        dov = new javax.swing.JLabel();
        problem = new javax.swing.JLabel();
        synopsis = new javax.swing.JLabel();
        table_parent_1 = new javax.swing.JScrollPane();
        med_details = new javax.swing.JTable();
        med_lab = new javax.swing.JLabel();
        no_records = new javax.swing.JLabel();
        no_prescription = new javax.swing.JLabel();
        past_test = new javax.swing.JPanel();
        past_test_parent = new javax.swing.JScrollPane();
        past_test_table = new javax.swing.JTable();
        past_test_label = new javax.swing.JLabel();
        view_test_button = new javax.swing.JButton();
        test_doc = new javax.swing.JLabel();
        test_dos = new javax.swing.JLabel();
        test_dot = new javax.swing.JLabel();
        test_type = new javax.swing.JLabel();
        test_syno = new javax.swing.JLabel();
        test_doc_name = new javax.swing.JLabel();
        test_doc_type = new javax.swing.JLabel();
        test_date = new javax.swing.JLabel();
        test_suggested_date = new javax.swing.JLabel();
        test_synopsis = new javax.swing.JLabel();
        test_report_button = new javax.swing.JButton();
        no_records_test = new javax.swing.JLabel();
        past_scan = new javax.swing.JPanel();
        past_scan_parent = new javax.swing.JScrollPane();
        past_scan_table = new javax.swing.JTable();
        check_but = new javax.swing.JButton();
        past_scan_lab = new javax.swing.JLabel();
        docn = new javax.swing.JLabel();
        scann = new javax.swing.JLabel();
        scan_dos = new javax.swing.JLabel();
        scan_sd = new javax.swing.JLabel();
        scan_syn = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        scan_date = new javax.swing.JLabel();
        scan_sugges_date = new javax.swing.JLabel();
        scan_synop = new javax.swing.JLabel();
        scan_det_report = new javax.swing.JButton();
        scan_type = new javax.swing.JLabel();
        scan_doc = new javax.swing.JLabel();
        no_past_scan = new javax.swing.JLabel();
        past_bill = new javax.swing.JPanel();
        past_doc_parent = new javax.swing.JScrollPane();
        past_doc_bill = new javax.swing.JTable();
        det_but_lab = new javax.swing.JButton();
        doc_tab_info = new javax.swing.JLabel();
        appointment_id_lab = new javax.swing.JLabel();
        visit_id_info = new javax.swing.JLabel();
        problem_lab_info = new javax.swing.JLabel();
        app_ii = new javax.swing.JLabel();
        vis_ii = new javax.swing.JLabel();
        pro_ii = new javax.swing.JLabel();
        cost_lab_info = new javax.swing.JLabel();
        co_ii = new javax.swing.JLabel();
        no_bill_lab = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        current_med = new javax.swing.JPanel();
        dn = new javax.swing.JLabel();
        dv = new javax.swing.JLabel();
        fud = new javax.swing.JLabel();
        pb = new javax.swing.JLabel();
        syn = new javax.swing.JLabel();
        medi_parent = new javax.swing.JScrollPane();
        medicine_table = new javax.swing.JTable();
        doc_name = new javax.swing.JLabel();
        visit_date = new javax.swing.JLabel();
        follow_date = new javax.swing.JLabel();
        prob = new javax.swing.JLabel();
        synop = new javax.swing.JLabel();
        medi_lab = new javax.swing.JLabel();
        see_pres_but = new javax.swing.JButton();
        no_recent_visit = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        p_id.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(p_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 10, 267, 26));

        phn.setBackground(new java.awt.Color(255, 255, 255));
        phn.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(phn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 40, 267, 27));

        name.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 260, 27));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 10, -1, -1));
        getContentPane().add(impid, new org.netbeans.lib.awtextra.AbsoluteConstraints(814, 48, 85, 19));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("USERNAME:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, 27));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("PATIENT ID :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 82, 27));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("NAME :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 74, 27));

        uname.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(uname, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 260, 27));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("PHONE :");
        jLabel4.setMaximumSize(new java.awt.Dimension(53, 19));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 40, 80, 27));

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/newpccms/logo.jpg"))); // NOI18N
        getContentPane().add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 130, 110));

        patient_log_tp.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        patient_log_tp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patient_log_tp.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                patient_log_tpMouseMoved(evt);
            }
        });

        demo.setBackground(new java.awt.Color(255, 255, 255));
        demo.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("NAME :");
        demo.add(jLabel5);
        jLabel5.setBounds(56, 34, 186, 26);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("AGE :");
        demo.add(jLabel6);
        jLabel6.setBounds(56, 71, 186, 26);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("DATE OF BIRTH :");
        demo.add(jLabel7);
        jLabel7.setBounds(56, 104, 186, 27);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("ADDRESS :");
        demo.add(jLabel8);
        jLabel8.setBounds(56, 137, 186, 24);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("GENDER :");
        demo.add(jLabel9);
        jLabel9.setBounds(56, 167, 186, 26);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("HEIGHT :");
        demo.add(jLabel11);
        jLabel11.setBounds(56, 235, 186, 23);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("ALLERGIES :");
        demo.add(jLabel13);
        jLabel13.setBounds(56, 299, 186, 24);

        nam.setBackground(new java.awt.Color(255, 255, 255));
        demo.add(nam);
        nam.setBounds(260, 34, 430, 26);
        demo.add(age);
        age.setBounds(260, 71, 430, 26);
        demo.add(dob);
        dob.setBounds(260, 103, 430, 28);
        demo.add(add);
        add.setBounds(260, 137, 430, 24);
        demo.add(gen);
        gen.setBounds(260, 167, 430, 26);
        demo.add(bg);
        bg.setBounds(260, 199, 430, 25);
        demo.add(hei);
        hei.setBounds(260, 234, 430, 24);
        demo.add(wei);
        wei.setBounds(260, 269, 430, 24);
        demo.add(all);
        all.setBounds(260, 299, 430, 24);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("BLOOD GROUP :");
        demo.add(jLabel15);
        jLabel15.setBounds(56, 199, 186, 25);

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel24.setText("WEIGHT :");
        demo.add(jLabel24);
        jLabel24.setBounds(56, 269, 186, 24);

        patient_log_tp.addTab("DEMOGRAPHICS", demo);

        current_med1.setEnabled(false);
        current_med1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        current_med1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dn1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dn1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dn1.setText("DOCTOR NAME :");
        current_med1.add(dn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 120, 25));

        dv1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dv1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dv1.setText("DATE OF VISIT :");
        current_med1.add(dv1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 110, 26));

        fud1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        fud1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        fud1.setText("FOLLOW UP DATE :");
        current_med1.add(fud1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 122, 140, 23));

        pb1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pb1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pb1.setText("PROBLEM :");
        current_med1.add(pb1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 161, 80, -1));

        syn1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        syn1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        syn1.setText("SYNOPSIS :");
        current_med1.add(syn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 204, 80, -1));
        current_med1.add(doc_name1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 300, 25));
        current_med1.add(visit_date1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 300, 25));
        current_med1.add(follow_date1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 300, 25));
        current_med1.add(prob1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 151, 300, 25));
        current_med1.add(synop1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 194, 300, 25));
        current_med1.add(treatment_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 70, 224, 27));

        no_recent_visit1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_recent_visit1.setText("NO RECENT MEDICATION");
        current_med1.add(no_recent_visit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, 327, 31));

        patient_log_tp.addTab("CURRENT MEDICATION", current_med1);

        check_symp.setLayout(null);

        s.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        s.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        s.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "HIGH FEVER", "COUGH", "CHILLS", "SORE THROAT", "RUNNING NOSE", "DRAINING SINUS", "HEADACHE", "POOR APETITE", "VOMITTING", "NAUSEA", " ", "DIARRHOEA", "BLOOD IN DIARRHOEA", "CONSTIPATION", " ", "HEART THROBBING", "CHEST PAIN", " ", "SWEAT", "NIGHT SWEAT", " ", "MUSCLE PAIN", "ABDOMINAL PAIN", "FULL BODY ACHE", "JOINT PAINS", " ", "STIFFNESS IN BODY", "LEG CRAMPS", " ", "CONJUNCTIVITIS", "PAIN BEHIND EYES", " ", "HEMOPYSIS", "NOSE BLEED", " ", "REDDISH BROWN GROWTH ON SKIN", "SKIN LEISONS", "SKIN PAPULES", "SKIN RASH", "ULCER ON SKIN", "NECROSIS OF SKIN", "MASSES ALONG NECK", " ", "BLOOD PRESENT IN URINE", "BLACK COLOUR OF URINE", "PAINFUL URINATION", " ", "FATIGUE", "DIZZINESS", "SEIZURE", "LETHARGY", " ", "FEELING IRRITABLE", " ", "WEIGHT GAIN", "WEIGHT LOSS", "BLOATING IN ABDOMEN", "SWELLING OF BODY" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(s);

        check_symp.add(jScrollPane1);
        jScrollPane1.setBounds(40, 50, 290, 380);

        jButton8.setText("SUBMIT");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        check_symp.add(jButton8);
        jButton8.setBounds(40, 450, 290, 50);

        disp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        disp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        check_symp.add(disp);
        disp.setBounds(660, 70, 187, 39);

        jLabel14.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("SELECT SYMPTOMS");
        check_symp.add(jLabel14);
        jLabel14.setBounds(40, 20, 290, 30);

        may_lab.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        may_lab.setText("YOU MAY BE SUFFERING FROM:");
        check_symp.add(may_lab);
        may_lab.setBounds(450, 70, 210, 40);

        bk.setText("BOOK APPOINTMENT");
        bk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bkActionPerformed(evt);
            }
        });
        check_symp.add(bk);
        bk.setBounds(540, 130, 240, 60);

        patient_log_tp.addTab("CHECK SYMPTOMS", check_symp);

        book_app.setLayout(null);

        app_date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        app_date.setText("SELECT APPOINTMENT DATE :");
        book_app.add(app_date);
        app_date.setBounds(30, 120, 189, 30);

        check_slot.setText("CHECK AVAILABLE SLOTS");
        check_slot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_slotActionPerformed(evt);
            }
        });
        book_app.add(check_slot);
        check_slot.setBounds(490, 120, 237, 23);

        spe_combox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "GENERAL SPECIALIST", "PEDIATRICIAN", "OPHTHALMOLOGIST", "ENT", "CARDIOLOGIST", "NEUROLOGIST", "ORTHOPEDIC SURGEON", "GASTROENTEROLOGIST", "DENTIST" }));
        spe_combox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spe_comboxActionPerformed(evt);
            }
        });
        book_app.add(spe_combox);
        spe_combox.setBounds(260, 40, 190, 20);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("SELECT DOCTOR'S SPECIALITY:");
        book_app.add(jLabel10);
        jLabel10.setBounds(30, 40, 189, 14);

        search_spec.setText("SEARCH");
        search_spec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_specActionPerformed(evt);
            }
        });
        book_app.add(search_spec);
        search_spec.setBounds(490, 40, 240, 23);

        see_doc_lab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        see_doc_lab.setText("SELECT DOCTOR:");
        book_app.add(see_doc_lab);
        see_doc_lab.setBounds(30, 80, 190, 20);

        doc_combox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        doc_combox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_comboxActionPerformed(evt);
            }
        });
        book_app.add(doc_combox);
        doc_combox.setBounds(260, 80, 190, 20);

        doc_search.setText("SEARCH");
        doc_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_searchActionPerformed(evt);
            }
        });
        book_app.add(doc_search);
        doc_search.setBounds(490, 80, 240, 23);

        available_slots_lab.setText("AVAILABLE SLOTS");
        book_app.add(available_slots_lab);
        available_slots_lab.setBounds(390, 210, 110, 14);

        buttonGroup1.add(nin);
        nin.setText("09:00 AM");
        nin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ninActionPerformed(evt);
            }
        });
        book_app.add(nin);
        nin.setBounds(40, 230, 90, 23);

        buttonGroup1.add(ten);
        ten.setText("10:00 AM");
        book_app.add(ten);
        ten.setBounds(130, 230, 100, 23);

        buttonGroup1.add(ele);
        ele.setText("11:00 AM");
        book_app.add(ele);
        ele.setBounds(240, 230, 110, 23);

        buttonGroup1.add(twe);
        twe.setText("12:00 AM");
        book_app.add(twe);
        twe.setBounds(350, 230, 110, 23);

        buttonGroup1.add(two);
        two.setText("02:00 PM");
        book_app.add(two);
        two.setBounds(460, 230, 110, 23);

        buttonGroup1.add(thr);
        thr.setText("03:00 PM");
        book_app.add(thr);
        thr.setBounds(570, 230, 100, 23);

        buttonGroup1.add(fou);
        fou.setText("04:00 PM");
        book_app.add(fou);
        fou.setBounds(680, 230, 110, 23);

        buttonGroup1.add(fiv);
        fiv.setText("05:00 PM");
        book_app.add(fiv);
        fiv.setBounds(790, 230, 110, 23);

        appointment_submit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        appointment_submit.setText("SUBMIT");
        appointment_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointment_submitActionPerformed(evt);
            }
        });
        book_app.add(appointment_submit);
        appointment_submit.setBounds(560, 310, 210, 80);

        problems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                problemsActionPerformed(evt);
            }
        });
        book_app.add(problems);
        problems.setBounds(80, 320, 310, 60);

        appointment_date.setDateFormatString("yyyy-MM-dd");
        book_app.add(appointment_date);
        appointment_date.setBounds(260, 120, 190, 30);

        patient_log_tp.addTab("BOOK APPOINTMENT", book_app);

        jPanel1.setLayout(null);

        upcoming_appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "APPOINTMENT ID", "DOCTOR NAME", "DATE", "TIME", "DAY OF WEEK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        upcoming_appointments.setOpaque(false);
        upcoming_parent.setViewportView(upcoming_appointments);

        jPanel1.add(upcoming_parent);
        upcoming_parent.setBounds(130, 20, 750, 402);

        no_app.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_app.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_app.setText("YOU HAVE NO UPCOMING APPOINTMENTS");
        jPanel1.add(no_app);
        no_app.setBounds(260, 150, 480, 60);

        patient_log_tp.addTab("UPCOMING APPOINTMENTS", jPanel1);

        past_med.setLayout(null);

        past_appointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "VISIT ID", "DATE", "DOCTOR", "PROBLEM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_appointment.setShowHorizontalLines(false);
        past_appointment.setShowVerticalLines(false);
        past_appointment.getTableHeader().setReorderingAllowed(false);
        appointment_parent.setViewportView(past_appointment);
        if (past_appointment.getColumnModel().getColumnCount() > 0) {
            past_appointment.getColumnModel().getColumn(2).setResizable(false);
            past_appointment.getColumnModel().getColumn(3).setResizable(false);
        }

        past_med.add(appointment_parent);
        appointment_parent.setBounds(260, 50, 636, 100);

        check_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        check_button.setText("CHECK");
        check_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_buttonActionPerformed(evt);
            }
        });
        past_med.add(check_button);
        check_button.setBounds(530, 150, 75, 25);

        det_pres_but.setText("GET DETAILED PRESCRIPTION");
        det_pres_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                det_pres_butActionPerformed(evt);
            }
        });
        past_med.add(det_pres_but);
        det_pres_but.setBounds(410, 400, 230, 62);

        appointment_label.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        appointment_label.setText("SELECT THE PAST APPOINTMENT YOU WANT TO SEE");
        past_med.add(appointment_label);
        appointment_label.setBounds(310, 10, 480, 31);

        dov_lab.setText("DATE OF VISIT");
        past_med.add(dov_lab);
        dov_lab.setBounds(40, 250, 90, 14);

        prob_lab.setText("PROBLEM");
        past_med.add(prob_lab);
        prob_lab.setBounds(70, 290, 70, 14);

        docname.setText("DOCTOR NAME");
        past_med.add(docname);
        docname.setBounds(40, 210, 90, 14);

        syn_lab.setText("SYNOPSIS");
        past_med.add(syn_lab);
        syn_lab.setBounds(40, 330, 70, 14);
        past_med.add(doc_name_dup);
        doc_name_dup.setBounds(170, 200, 200, 30);
        past_med.add(dov_dup);
        dov_dup.setBounds(167, 240, 188, 0);
        past_med.add(prob_dup);
        prob_dup.setBounds(167, 279, 188, 0);
        past_med.add(syn_dup);
        syn_dup.setBounds(167, 323, 190, 0);
        past_med.add(dov);
        dov.setBounds(170, 240, 200, 30);
        past_med.add(problem);
        problem.setBounds(170, 280, 200, 30);
        past_med.add(synopsis);
        synopsis.setBounds(170, 320, 200, 30);

        med_details.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Dosage", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        med_details.getTableHeader().setReorderingAllowed(false);
        table_parent_1.setViewportView(med_details);

        past_med.add(table_parent_1);
        table_parent_1.setBounds(470, 240, 500, 100);

        med_lab.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        med_lab.setText("MEDICINE DETAILS");
        past_med.add(med_lab);
        med_lab.setBounds(630, 210, 170, 22);

        no_records.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_records.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_records.setText("NO PAST MEDICATION RECORDS");
        past_med.add(no_records);
        no_records.setBounds(360, 170, 440, 70);

        no_prescription.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        no_prescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_prescription.setText("NO MEDICINES PRESCRIBED");
        past_med.add(no_prescription);
        no_prescription.setBounds(620, 250, 250, 40);

        patient_log_tp.addTab("PAST MEDICATION", past_med);

        past_test.setLayout(null);

        past_test_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEST ID", "TEST", "DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_test_table.getTableHeader().setReorderingAllowed(false);
        past_test_parent.setViewportView(past_test_table);
        if (past_test_table.getColumnModel().getColumnCount() > 0) {
            past_test_table.getColumnModel().getColumn(0).setResizable(false);
            past_test_table.getColumnModel().getColumn(1).setResizable(false);
        }

        past_test.add(past_test_parent);
        past_test_parent.setBounds(20, 50, 550, 330);

        past_test_label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        past_test_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        past_test_label.setText("PAST TESTS");
        past_test.add(past_test_label);
        past_test_label.setBounds(180, 10, 227, 43);

        view_test_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        view_test_button.setText("VIEW TEST RESULTS");
        view_test_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_test_buttonActionPerformed(evt);
            }
        });
        past_test.add(view_test_button);
        view_test_button.setBounds(190, 400, 200, 40);

        test_doc.setText("DOCTOR'S NAME");
        past_test.add(test_doc);
        test_doc.setBounds(690, 80, 100, 20);

        test_dos.setText("SUGGESTED DATE");
        past_test.add(test_dos);
        test_dos.setBounds(680, 170, 110, 20);

        test_dot.setText("DATE OF TEST");
        past_test.add(test_dot);
        test_dot.setBounds(700, 140, 90, 20);

        test_type.setText("TEST TYPE");
        past_test.add(test_type);
        test_type.setBounds(720, 110, 70, 20);

        test_syno.setText("SYNOPSIS");
        past_test.add(test_syno);
        test_syno.setBounds(730, 200, 60, 20);
        past_test.add(test_doc_name);
        test_doc_name.setBounds(810, 80, 190, 20);
        past_test.add(test_doc_type);
        test_doc_type.setBounds(810, 110, 190, 20);
        past_test.add(test_date);
        test_date.setBounds(810, 140, 190, 20);
        past_test.add(test_suggested_date);
        test_suggested_date.setBounds(810, 170, 190, 20);
        past_test.add(test_synopsis);
        test_synopsis.setBounds(810, 200, 190, 20);

        test_report_button.setText("SEE REPORT");
        test_report_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                test_report_buttonActionPerformed(evt);
            }
        });
        past_test.add(test_report_button);
        test_report_button.setBounds(750, 240, 150, 23);

        no_records_test.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_records_test.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_records_test.setText("NO PAST TEST RECORDS");
        past_test.add(no_records_test);
        no_records_test.setBounds(340, 150, 450, 80);

        patient_log_tp.addTab("PAST TESTS", past_test);

        past_scan_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SCAN ID", "DATE", "SCAN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_scan_table.getTableHeader().setReorderingAllowed(false);
        past_scan_parent.setViewportView(past_scan_table);

        check_but.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        check_but.setText("CHECK");
        check_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_butActionPerformed(evt);
            }
        });

        past_scan_lab.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        past_scan_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        past_scan_lab.setText("PAST SCANS");

        docn.setText("DOCTOR'S NAME");

        scann.setText("SCAN TYPE");

        scan_dos.setText("DATE OF SCAN");

        scan_sd.setText("SUGGESTED DATE");

        scan_syn.setText("SYNOPSIS");

        scan_det_report.setText("SEE DETAILED REPORT");
        scan_det_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scan_det_reportActionPerformed(evt);
            }
        });

        no_past_scan.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_past_scan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_past_scan.setText("NO PAST SCAN RECORDS");

        javax.swing.GroupLayout past_scanLayout = new javax.swing.GroupLayout(past_scan);
        past_scan.setLayout(past_scanLayout);
        past_scanLayout.setHorizontalGroup(
            past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(past_scanLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(past_scan_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_scanLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(past_scanLayout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(no_past_scan))
                    .addGroup(past_scanLayout.createSequentialGroup()
                        .addComponent(past_scan_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(past_scanLayout.createSequentialGroup()
                                    .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(scann, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(docn)
                                        .addComponent(scan_dos))
                                    .addGap(7, 7, 7))
                                .addComponent(scan_syn, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(scan_sd))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scan_det_report, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(past_scanLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scan_doc, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scan_type, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scan_date, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scan_sugges_date, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scan_synop, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(66, 66, 66)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_scanLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(check_but, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        past_scanLayout.setVerticalGroup(
            past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(past_scanLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(past_scan_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(past_scanLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(docn)
                        .addGap(18, 18, 18)
                        .addComponent(scann, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(past_scanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(past_scanLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(no_past_scan))
                            .addGroup(past_scanLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(scan_dos, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(scan_sd)
                        .addGap(18, 18, 18)
                        .addComponent(scan_syn))
                    .addComponent(past_scan_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(past_scanLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(scan_doc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scan_type, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(scan_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scan_sugges_date, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(scan_synop, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(scan_det_report))
                    .addGroup(past_scanLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel21)))
                .addGap(18, 18, 18)
                .addComponent(check_but, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        patient_log_tp.addTab("PAST SCANS", past_scan);

        past_doc_bill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BILL ID", "DATE", "DOCTOR", "COST"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        past_doc_parent.setViewportView(past_doc_bill);

        det_but_lab.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        det_but_lab.setText("DETAILS");
        det_but_lab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                det_but_labActionPerformed(evt);
            }
        });

        doc_tab_info.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        doc_tab_info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doc_tab_info.setText("DOCTORS BILL INFO");

        appointment_id_lab.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        appointment_id_lab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        appointment_id_lab.setText("APPOINTMENT ID:");

        visit_id_info.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        visit_id_info.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        visit_id_info.setText("VISIT ID:");

        problem_lab_info.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        problem_lab_info.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        problem_lab_info.setText("PURPOSE:");

        cost_lab_info.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cost_lab_info.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cost_lab_info.setText("COST:");

        no_bill_lab.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_bill_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        no_bill_lab.setText("NO BILL INFO");

        javax.swing.GroupLayout past_billLayout = new javax.swing.GroupLayout(past_bill);
        past_bill.setLayout(past_billLayout);
        past_billLayout.setHorizontalGroup(
            past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(doc_tab_info, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(past_doc_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(past_billLayout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(no_bill_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(det_but_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(appointment_id_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(app_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(visit_id_info, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(vis_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(problem_lab_info, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(pro_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(cost_lab_info, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(co_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        past_billLayout.setVerticalGroup(
            past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(past_billLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(doc_tab_info, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(past_doc_parent, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(past_billLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(no_bill_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(det_but_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(appointment_id_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(app_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visit_id_info, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vis_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(past_billLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(problem_lab_info, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pro_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(past_billLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cost_lab_info, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(past_billLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(co_ii, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        patient_log_tp.addTab("PAST DOCTOR BILL INFO", past_bill);

        getContentPane().add(patient_log_tp, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 1200, 520));

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/newpccms/rsz_blood-pressure-gauge-business-computer-263370.jpg"))); // NOI18N
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        current_med.setEnabled(false);
        current_med.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        current_med.setLayout(null);

        dn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dn.setText("DOCTOR NAME :");
        current_med.add(dn);
        dn.setBounds(48, 38, 150, 25);

        dv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dv.setText("DATE OF VISIT :");
        current_med.add(dv);
        dv.setBounds(48, 81, 150, 26);

        fud.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fud.setText("FOLLOW UP INFO :");
        current_med.add(fud);
        fud.setBounds(48, 131, 150, 17);

        pb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pb.setText("PROBLEM :");
        current_med.add(pb);
        pb.setBounds(48, 166, 150, 17);

        syn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        syn.setText("SYNOPSIS :");
        current_med.add(syn);
        syn.setBounds(48, 194, 150, 17);

        medicine_table.setAutoCreateRowSorter(true);
        medicine_table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        medicine_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Dosage", "Start Date", "Duration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        medicine_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        medicine_table.setColumnSelectionAllowed(true);
        medi_parent.setViewportView(medicine_table);
        medicine_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        current_med.add(medi_parent);
        medi_parent.setBounds(130, 270, 609, 206);
        current_med.add(doc_name);
        doc_name.setBounds(216, 38, 307, 25);
        current_med.add(visit_date);
        visit_date.setBounds(216, 81, 307, 32);
        current_med.add(follow_date);
        follow_date.setBounds(216, 131, 307, 17);
        current_med.add(prob);
        prob.setBounds(216, 166, 307, 17);
        current_med.add(synop);
        synop.setBounds(216, 194, 307, 17);

        medi_lab.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        medi_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        medi_lab.setText("MEDICATIONS");
        current_med.add(medi_lab);
        medi_lab.setBounds(120, 230, 600, 33);

        see_pres_but.setText("SEE PRESCRIPTION");
        see_pres_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                see_pres_butActionPerformed(evt);
            }
        });
        current_med.add(see_pres_but);
        see_pres_but.setBounds(700, 90, 180, 23);

        no_recent_visit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        no_recent_visit.setText("NO RECENT MEDICATION");
        current_med.add(no_recent_visit);
        no_recent_visit.setBounds(390, 170, 327, 31);

        getContentPane().add(current_med, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 1009, 515));

        jLabel16.setText("jLabel16");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 180, 110));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        home v = new home();
        close();
        v.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void patient_log_tpMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patient_log_tpMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_patient_log_tpMouseMoved

    private void scan_det_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scan_det_reportActionPerformed

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="Select report from scan where sid = "+si_int+";";
            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_scan.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_scan.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_scan_det_reportActionPerformed

    private void check_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_butActionPerformed

        int r = past_scan_table.getSelectedRow();
        String re = past_scan_table.getModel().getValueAt(r,0).toString();
        String vi = re.substring(2);
        si_int = Integer.parseInt(vi);

        int res = 1;

        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="call scan_detail("+si_int+");";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                String r1=rs.getString(1);
                String r2=rs.getString(2);
                String r3=rs.getString(3);
                String r4=rs.getString(4);
                String r5=rs.getString(5);
                scan_doc.setText(r1);
                scan_type.setText(r2);
                scan_date.setText(r3);
                scan_sugges_date.setText(r4);
                scan_synop.setText(r5);
            }

            String qw = "select isnull(report) from scan where sid  = "+si_int+";";
            rs= stmt.executeQuery(qw);
            while(rs.next())
            {
                res = rs.getInt(1);
            }
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        if(res == 0)
        scan_det_report.setVisible(true);
        else
        scan_det_report.setVisible(false);

        docn.setVisible(true);
        scann.setVisible(true);
        scan_dos.setVisible(true);
        scan_sd.setVisible(true);
        scan_syn.setVisible(true);
        scan_doc.setVisible(true);
        scan_type.setVisible(true);
        scan_date.setVisible(true);
        scan_sugges_date.setVisible(true);
        scan_synop.setVisible(true);
    }//GEN-LAST:event_check_butActionPerformed

    private void test_report_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_test_report_buttonActionPerformed

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="Select pdf_upload from test where testid = "+ti_int+";";
            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_test.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_test.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_test_report_buttonActionPerformed

    private void view_test_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_test_buttonActionPerformed
        int r = past_test_table.getSelectedRow();
        String re = past_test_table.getModel().getValueAt(r,0).toString();
        String vi = re.substring(1);
        ti_int = Integer.parseInt(vi);

        int res = 1;

        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="call test_selection("+ti_int+");";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                String r1=rs.getString(1);
                String r2=rs.getString(2);
                String r3=rs.getString(3);
                String r4=rs.getString(4);
                String r5=rs.getString(5);
                test_doc_name.setText(r1);
                test_doc_type.setText(r2);
                test_date.setText(r3);
                test_suggested_date.setText(r4);
                test_synopsis.setText(r5);
            }

            String qw = "select isnull(pdf_upload) from test where testid  = "+ti_int+";";
            rs= stmt.executeQuery(qw);
            while(rs.next())
            {
                res = rs.getInt(1);
            }
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        if(res == 0)
        test_report_button.setVisible(true);
        else
        test_report_button.setVisible(false);

        test_doc.setVisible(true);
        test_type.setVisible(true);
        test_dot.setVisible(true);
        test_dos.setVisible(true);
        test_syno.setVisible(true);
        test_doc_name.setVisible(true);
        test_doc_type.setVisible(true);
        test_date.setVisible(true);
        test_suggested_date.setVisible(true);
        test_synopsis.setVisible(true);
    }//GEN-LAST:event_view_test_buttonActionPerformed

    private void det_pres_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_det_pres_butActionPerformed

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="Select prescription_pdf from treatment where treatment_vid = "+vi_int+";";
            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_prescription.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_prescription.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_det_pres_butActionPerformed

    private void check_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_buttonActionPerformed
        int r = past_appointment.getSelectedRow();
        String re = past_appointment.getModel().getValueAt(r,0).toString();
        String vi = re.substring(2);
        vi_int = Integer.parseInt(vi);

        int res =1;

        DefaultTableModel model = (DefaultTableModel) med_details.getModel();
        if(model.getRowCount()> 0)
        model.setRowCount(0);

        ResultSet rs;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="call past_details_medicine("+vi_int+");";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                String col1=rs.getString(1);
                String col2=rs.getString(2);
                String col3=rs.getString(3);
                Object[] row = { col1, col2, col3};
                model.addRow(row);
            }

            String qw = "call past_demographics_details("+vi_int+");";
            rs= stmt.executeQuery(qw);
            while(rs.next())
            {
                String dn = rs.getString(1);
                String dv = rs.getString(2);
                String pb = rs.getString(3);
                String sn = rs.getString(4);
                doc_name_dup.setText(dn);
                dov.setText(dv);
                problem.setText(pb);
                synopsis.setText(sn);

            }
            String qs="select isnull(prescription_pdf) from treatment where treatment_vid = "+vi_int+";";
            rs= stmt.executeQuery(qs);
            while(rs.next())
            {
                res = rs.getInt(1);
            }
            rs.close();
        }

        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        if(res == 0)
        det_pres_but.setVisible(true);
        else
        det_pres_but.setVisible(false);

        if(model.getRowCount() ==  0)
        {
            table_parent_1.setVisible(false);
            med_lab.setVisible(false);
            no_prescription.setVisible(true);
        }
        else
        {
            table_parent_1.setVisible(true);
            med_lab.setVisible(true);
            no_prescription.setVisible(false);
        }

        docname.setVisible(true);
        dov_lab.setVisible(true);
        prob_lab.setVisible(true);
        syn_lab.setVisible(true);
        doc_name_dup.setVisible(true);
        dov.setVisible(true);
        problem.setVisible(true);
        synopsis.setVisible(true);
    }//GEN-LAST:event_check_buttonActionPerformed

    private void problemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_problemsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_problemsActionPerformed

    private void appointment_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointment_submitActionPerformed
        no_app.setVisible(false);
        upcoming_parent.setVisible(true);
        String probb = problems.getText();
        int docc = doci;
        int pp = Integer.parseInt(p_id.getText().substring(2,4));
        String ti = null;
        DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
        String da = fmt.format(appointment_date.getDate());
        ResultSet rs;
        DefaultTableModel m = (DefaultTableModel) upcoming_appointments.getModel();
        m.setRowCount(0);
        int aps =0;

        if(nin.isSelected())
        {
            aps = 1;
            ti = "09:00:00";
        }
        else if(ten.isSelected())
        {
            aps = 2;
            ti = "10:00:00";
        }
        else if(ele.isSelected())
        {
            aps = 3;
            ti = "11:00:00";
        }
        else if(twe.isSelected())
        {
            aps = 4;
            ti = "12:00:00";

        }
        else if(two.isSelected())
        {
            aps = 5;
            ti = "14:00:00";
        }
        else if(thr.isSelected())
        {
            aps = 6;
            ti = "15:00:00";
        }
        else if(fou.isSelected())
        {
            aps = 7;
            ti = "16:00:00";
        }
        else if(fiv.isSelected())
        {
            aps = 8;
            ti = "17:00:00";
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a time slot!");
        }
        if (aps != 0)
        {
            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                String a="jdbc:mysql://localhost:3306/pccms";
                Connection con;
                con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
                Statement stmt=(Statement)con.createStatement();
                String q1= "insert into appointments (ap_docid,ap_pid,app_day,app_time,slot_no,problems) values ('"+docc+"','"+pp+"','"+da+"','"+ti+"','"+aps+"','"+probb+"');";
                stmt.executeUpdate(q1);

                String qeq= "call upcoming_appointments("+pp+");";

                rs=stmt.executeQuery(qeq);
                while(rs.next())
                {
                    String col1=rs.getString(1);
                    String col2=rs.getString(2);
                    String col3=rs.getString(3);
                    String col4=rs.getString(4);
                    int c5=rs.getInt(5);
                    String col5 = "";
                    if(c5 == 2)
                    col5 = "Monday";
                    else if(c5 == 3)
                    col5 = "Tuesday";
                    else if(c5 == 4)
                    col5 = "Wednesday";
                    else if(c5 == 5)
                    col5 = "Thursday";
                    else if(c5 == 6)
                    col5 = "Friday";
                    else if(c5 == 7)
                    col5 = "Saturday";

                    Object[] row = { col1, col2, col3, col4, col5};
                    m.addRow(row);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
        }

        patient_log_tp.setSelectedIndex(4);
        see_doc_lab.setVisible(false);
        doc_combox.setVisible(false);
        doc_search.setVisible(false);
        app_date.setVisible(false);
        appointment_date.setVisible(false);
        check_slot.setVisible(false);
        available_slots_lab.setVisible(false);
        nin.setVisible(false);
        ten.setVisible(false);
        ele.setVisible(false);
        twe.setVisible(false);
        two.setVisible(false);
        thr.setVisible(false);
        fou.setVisible(false);
        fiv.setVisible(false);
        appointment_submit.setVisible(false);
        problems.setVisible(false);

    }//GEN-LAST:event_appointment_submitActionPerformed

    private void ninActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ninActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ninActionPerformed

    private void doc_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_searchActionPerformed

        appointment_date.getJCalendar().setMinSelectableDate(new Date());
        appointment_date.setVisible(true);
        check_slot.setVisible(true);
        app_date.setVisible(true);
    }//GEN-LAST:event_doc_searchActionPerformed

    private void doc_comboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_comboxActionPerformed
        String ev = evt.getActionCommand();
        if(ev.equals("comboBoxChanged"))
        {
            available_slots_lab.setVisible(false);
            nin.setVisible(false);
            ten.setVisible(false);
            ele.setVisible(false);
            twe.setVisible(false);
            two.setVisible(false);
            thr.setVisible(false);
            fou.setVisible(false);
            fiv.setVisible(false);
            appointment_submit.setVisible(false);
            app_date.setVisible(false);
            appointment_date.setVisible(false);
            check_slot.setVisible(false);
            problems.setVisible(false);
        }
    }//GEN-LAST:event_doc_comboxActionPerformed

    private void search_specActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_specActionPerformed
        doc_combox.removeAllItems();
        doc_combox.addItem("SELECT");
        int sel = spe_combox.getSelectedIndex();

        ResultSet rs;

        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            Statement stmt=(Statement)con.createStatement();
            String quer="select docid, concat (\"DR.\",fname,\" \",lname) from doctor where speciality = "+sel+";";
            rs=stmt.executeQuery(quer);
            while(rs.next())
            {
                int ri = rs.getInt(1);
                String r = rs.getString(2);
                String pts ="("+ri+")"+r;
                doc_combox.addItem(pts);
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }

        see_doc_lab.setVisible(true);
        doc_combox.setVisible(true);
        doc_search.setVisible(true);
        available_slots_lab.setVisible(false);
        nin.setVisible(false);
        ten.setVisible(false);
        ele.setVisible(false);
        twe.setVisible(false);
        two.setVisible(false);
        thr.setVisible(false);
        fou.setVisible(false);
        fiv.setVisible(false);
        appointment_submit.setVisible(false);
        app_date.setVisible(false);
        appointment_date.setVisible(false);
        check_slot.setVisible(false);
    }//GEN-LAST:event_search_specActionPerformed

    private void spe_comboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spe_comboxActionPerformed
        String ev = evt.getActionCommand();
        if(ev.equals("comboBoxChanged"))
        {
            available_slots_lab.setVisible(false);
            nin.setVisible(false);
            ten.setVisible(false);
            ele.setVisible(false);
            twe.setVisible(false);
            two.setVisible(false);
            thr.setVisible(false);
            fou.setVisible(false);
            fiv.setVisible(false);
            appointment_submit.setVisible(false);
            app_date.setVisible(false);
            appointment_date.setVisible(false);
            check_slot.setVisible(false);
            see_doc_lab.setVisible(false);
            doc_combox.setVisible(false);
            doc_search.setVisible(false);
            problems.setVisible(false);
        }
    }//GEN-LAST:event_spe_comboxActionPerformed

    @SuppressWarnings("empty-statement")
    private void check_slotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_slotActionPerformed

        if(doc_combox.getSelectedItem() != "SELECT")
        {
            int flag = 0;  //for sunday holiday
            String dvv = doc_combox.getSelectedItem().toString();
            int did=Integer.parseInt(dvv.substring(1,dvv.indexOf(")")));
            doci = did;
            System.out.println(did);
            DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
            String da = fmt.format(appointment_date.getDate());
            System.out.println(da);
            int arr[]={0,0,0,0,0,0,0,0};
            ResultSet rs;

            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                String a="jdbc:mysql://localhost:3306/pccms";
                Connection con;
                con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
                Statement stmt=(Statement)con.createStatement();
                String quer="call book_app("+did+","+"\""+da+"\""+");";
                String qw = "Select dayofweek("+"\""+da+"\""+");";
                rs = stmt.executeQuery(qw);
                if(rs.next())
                {
                    int dw = rs.getInt(1);
                    if(dw == 1)
                    {
                        JOptionPane.showMessageDialog(null,"Sunday Holiday!");
                        flag = 1;
                    }
                }
                if(flag == 0)
                {
                    rs=stmt.executeQuery(quer);
                    while(rs.next())
                    {
                        int rq = rs.getInt(1);

                        arr[rq-1]=1;
                    }
                }

            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
            int f=0;  //to check for available slots
            if(flag == 0)
            {
                for(int i=0;i<8;i++)
                {
                    if(arr[i] == 0)
                    {
                        f=1;
                        switch(i)
                        {
                            case 0: nin.setVisible(true);
                            break;
                            case 1: ten.setVisible(true);
                            break;
                            case 2: ele.setVisible(true);
                            break;
                            case 3: twe.setVisible(true);
                            break;
                            case 4: two.setVisible(true);
                            break;
                            case 5: thr.setVisible(true);
                            break;
                            case 6: fou.setVisible(true);
                            break;
                            case 7: fiv.setVisible(true);
                            break;
                        }
                    }
                }
                appointment_submit.setVisible(true);
                available_slots_lab.setVisible(true);
                problems.setVisible(true);
            }

            if(f == 0 && flag == 0)
            {
                JOptionPane.showMessageDialog(null,"No available slots! Choose another suitable date!");
                available_slots_lab.setVisible(false);
                nin.setVisible(false);
                ten.setVisible(false);
                ele.setVisible(false);
                twe.setVisible(false);
                two.setVisible(false);
                thr.setVisible(false);
                fou.setVisible(false);
                fiv.setVisible(false);
                appointment_submit.setVisible(false);
                problems.setVisible(false);
            }
            if(flag == 1)
            {
                available_slots_lab.setVisible(false);
                nin.setVisible(false);
                ten.setVisible(false);
                ele.setVisible(false);
                twe.setVisible(false);
                two.setVisible(false);
                thr.setVisible(false);
                fou.setVisible(false);
                fiv.setVisible(false);
                appointment_submit.setVisible(false);
                problems.setVisible(false);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select a doctor!");
        }

    }//GEN-LAST:event_check_slotActionPerformed

    private void appointment_dateVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_appointment_dateVetoableChange

    }//GEN-LAST:event_appointment_dateVetoableChange

    private void appointment_dateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_appointment_dateKeyTyped
        System.out.println(evt.getID());
    }//GEN-LAST:event_appointment_dateKeyTyped

    private void appointment_datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_appointment_datePropertyChange

    }//GEN-LAST:event_appointment_datePropertyChange

    private void appointment_dateInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_appointment_dateInputMethodTextChanged
        System.out.println(evt.paramString());
    }//GEN-LAST:event_appointment_dateInputMethodTextChanged

    private void bkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bkActionPerformed
        patient_log_tp.setSelectedIndex(3);
        if(disp.getText().equals("FOOD POISONING"))
        spe_combox.setSelectedIndex(8);
        else
        spe_combox.setSelectedIndex(1);
    }//GEN-LAST:event_bkActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
        int flag =1;
        if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) && s.isSelectedIndex(8) && !s.isSelectedIndex(9)  &&  s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  !s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && !s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && !s.isSelectedIndex(37) && !s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && s.isSelectedIndex(44) && !s.isSelectedIndex(45)  && !s.isSelectedIndex(47)  && !s.isSelectedIndex(48) && !s.isSelectedIndex(49) && !s.isSelectedIndex(50) && !s.isSelectedIndex(52)  && !s.isSelectedIndex(54) &&  !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && !s.isSelectedIndex(57) )
        {
            disp.setText("MALARIA");
        }
        else if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && !s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) && s.isSelectedIndex(8) && s.isSelectedIndex(9)  &&  !s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  !s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  !s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && !s.isSelectedIndex(37) && s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && !s.isSelectedIndex(44) && !s.isSelectedIndex(45) && s.isSelectedIndex(47)  && !s.isSelectedIndex(48) && !s.isSelectedIndex(49) && !s.isSelectedIndex(50)  && !s.isSelectedIndex(52) &&  !s.isSelectedIndex(54) && !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && !s.isSelectedIndex(57))
        {
            disp.setText("DENGUE");
        }

        else if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && !s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) && !s.isSelectedIndex(8) && !s.isSelectedIndex(9)  &&  !s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  s.isSelectedIndex(16)  &&  !s.isSelectedIndex(18) &&  s.isSelectedIndex(19) &&    !s.isSelectedIndex(21) &&  s.isSelectedIndex(22) &&  !s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && s.isSelectedIndex(32) && !s.isSelectedIndex(33) && s.isSelectedIndex(35) && s.isSelectedIndex(36) && !s.isSelectedIndex(37) && !s.isSelectedIndex(38) && s.isSelectedIndex(39) && s.isSelectedIndex(40) && s.isSelectedIndex(41) && s.isSelectedIndex(43) && !s.isSelectedIndex(44) && s.isSelectedIndex(45)   && s.isSelectedIndex(47) && !s.isSelectedIndex(48) && s.isSelectedIndex(49) && !s.isSelectedIndex(50)  && !s.isSelectedIndex(52) &&  s.isSelectedIndex(54) && !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && !s.isSelectedIndex(57) )
        {
            disp.setText("TUBERCULOSIS");
        }

        else if(s.isSelectedIndex(0) && s.isSelectedIndex(1) && s.isSelectedIndex(2) && s.isSelectedIndex(3) && s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) && s.isSelectedIndex(8) && !s.isSelectedIndex(9)  &&  !s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  !s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    !s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && !s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && !s.isSelectedIndex(37) && !s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && !s.isSelectedIndex(44) && !s.isSelectedIndex(45) && s.isSelectedIndex(47)  && s.isSelectedIndex(48) && !s.isSelectedIndex(49) && !s.isSelectedIndex(50)  && !s.isSelectedIndex(52) &&  !s.isSelectedIndex(54) && !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && !s.isSelectedIndex(57))
        {
            disp.setText("SWINE FLU");
        }

        else if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && !s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) && !s.isSelectedIndex(8) && s.isSelectedIndex(9)  &&  !s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  !s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && !s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && !s.isSelectedIndex(37) && s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && !s.isSelectedIndex(44) && !s.isSelectedIndex(45) && s.isSelectedIndex(47)  && !s.isSelectedIndex(48) && !s.isSelectedIndex(49) && !s.isSelectedIndex(50)  && !s.isSelectedIndex(52) &&  !s.isSelectedIndex(54) && !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && s.isSelectedIndex(57))
        {
            disp.setText("CHIKUNGUNYA");
        }
        else if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && !s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && s.isSelectedIndex(7) && s.isSelectedIndex(8) && !s.isSelectedIndex(9)  &&  s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  !s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && !s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && !s.isSelectedIndex(37) && s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && !s.isSelectedIndex(44) && !s.isSelectedIndex(45) && !s.isSelectedIndex(47)  && !s.isSelectedIndex(48) && !s.isSelectedIndex(49) && s.isSelectedIndex(50)  && !s.isSelectedIndex(52) &&  !s.isSelectedIndex(54) && s.isSelectedIndex(55) && s.isSelectedIndex(56) && !s.isSelectedIndex(57))
        {
            disp.setText("TYPHOID FEVER");
        }
        else if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && !s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && s.isSelectedIndex(7) && !s.isSelectedIndex(8) && !s.isSelectedIndex(9)  &&  !s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  !s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    !s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  s.isSelectedIndex(23) &&  !s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   !s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && !s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && s.isSelectedIndex(37) && s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && !s.isSelectedIndex(44) && !s.isSelectedIndex(45) && s.isSelectedIndex(47)  && !s.isSelectedIndex(48) && !s.isSelectedIndex(49) && !s.isSelectedIndex(50)  && s.isSelectedIndex(52) &&  !s.isSelectedIndex(54) && !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && !s.isSelectedIndex(57))
        {
            disp.setText("CHICKEN POX");
        }
        else if(s.isSelectedIndex(0) && !s.isSelectedIndex(1) && s.isSelectedIndex(2) && !s.isSelectedIndex(3) && !s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && s.isSelectedIndex(7) && s.isSelectedIndex(8) && !s.isSelectedIndex(9)  &&  !s.isSelectedIndex(11) &&  !s.isSelectedIndex(12) &&  !s.isSelectedIndex(13) &&    !s.isSelectedIndex(15) &&  !s.isSelectedIndex(16)  &&  s.isSelectedIndex(18) &&  !s.isSelectedIndex(19) &&    s.isSelectedIndex(21) &&  !s.isSelectedIndex(22) &&  !s.isSelectedIndex(23) &&  s.isSelectedIndex(24) &&   !s.isSelectedIndex(26) &&  !s.isSelectedIndex(27) &&   s.isSelectedIndex(29) &&  !s.isSelectedIndex(30)  && !s.isSelectedIndex(32) && !s.isSelectedIndex(33) && !s.isSelectedIndex(35) && !s.isSelectedIndex(36) && !s.isSelectedIndex(37) && s.isSelectedIndex(38) && !s.isSelectedIndex(39) && !s.isSelectedIndex(40) && !s.isSelectedIndex(41) && !s.isSelectedIndex(43) && !s.isSelectedIndex(44) && !s.isSelectedIndex(45) && !s.isSelectedIndex(47)  && !s.isSelectedIndex(48) && !s.isSelectedIndex(49) && !s.isSelectedIndex(50)  && !s.isSelectedIndex(52) &&  !s.isSelectedIndex(54) && !s.isSelectedIndex(55) && !s.isSelectedIndex(56) && !s.isSelectedIndex(57))
        {
            disp.setText("ZIKA");
        }
        else if(s.isSelectedIndex(0) && s.isSelectedIndex(1) && s.isSelectedIndex(2) && s.isSelectedIndex(3) && s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) )
        {
            disp.setText("NORMAL FEVER");
        }
        else if(s.isSelectedIndex(0) && s.isSelectedIndex(1) && s.isSelectedIndex(2) && s.isSelectedIndex(3) && s.isSelectedIndex(4) && !s.isSelectedIndex(5) && s.isSelectedIndex(6) && !s.isSelectedIndex(7) && s.isSelectedIndex(8) && s.isSelectedIndex(9)  &&  s.isSelectedIndex(11) )
        {
            disp.setText("VIRAL FEVER");
        }
        else if(s.isSelectedIndex(7) && s.isSelectedIndex(8) && s.isSelectedIndex(9) && s.isSelectedIndex(11) )
        {
            disp.setText("FOOD POISONING");
        }
        else
        {
            flag =0;
            JOptionPane.showMessageDialog(null, "WE ARE STILL UNDER DEVELOPMENT \nAND NOT ABLE TO IDENTIFY YOUR DISEASE!\nGO AHEAD AND BOOK YOUR APPOINTMENT!");
        }
        if (flag == 1)
        {
             may_lab.setVisible(true);
        }
       
        bk.setVisible(true);

    }//GEN-LAST:event_jButton8ActionPerformed

    private void see_pres_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_see_pres_butActionPerformed

        int pi = Integer.parseInt(p_id.getText().substring(2));

        ResultSet rs;
        Statement stmt;
        InputStream inp;
        FileOutputStream out;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="select t.prescription_pdf, max(v.vis_date) from treatment t, visit v, patient p where v.vid = t.treatment_vid and p.pid = v.vis_pid and p.pid="+pi+";";

            rs = stmt.executeQuery(q);
            File tf = new File("D:\\pccms-pdfs\\output_latest_prescription.pdf");
            out = new FileOutputStream(tf);
            if(rs.next())
            {
                inp = rs.getBinaryStream(1);
                byte[] buffer = new byte[1024];
                while(inp.read(buffer)>0)
                {
                    out.write(buffer);
                }
            }

        }
        catch (ClassNotFoundException | IOException | SQLException ex)
        {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "D:\\pccms-pdfs\\output_latest_prescription.pdf");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }

    }//GEN-LAST:event_see_pres_butActionPerformed

    private void det_but_labActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_det_but_labActionPerformed
        
        int r = past_doc_bill.getSelectedRow();
        int bid = Integer.parseInt(past_doc_bill.getModel().getValueAt(r,0).toString().substring(3));  //to get invoice id
        
        ResultSet rs = null;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String a="jdbc:mysql://localhost:3306/pccms";
            Connection con;
            Statement stmt;
            con = (Connection)DriverManager.getConnection(a,"root","Password@1234");
            stmt = (Statement) con.createStatement();
            String q ="select concat(\"APD\",inv_appid), concat(\"VI\",inv_vid), purpose, amt_due from doctor_bill_info where invid = "+bid+";";
            rs= stmt.executeQuery(q);
            while(rs.next())
            {
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                String s3 = rs.getString(3);
                String s4 = rs.getString(4);
                app_ii.setText(s1);
                vis_ii.setText(s2);
                pro_ii.setText(s3);
                co_ii.setText(s4);
                
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
        
        appointment_id_lab.setVisible(true);
        visit_id_info.setVisible(true);
        problem_lab_info.setVisible(true);
        cost_lab_info.setVisible(true);
        app_ii.setVisible(true);
        vis_ii.setVisible(true);
        pro_ii.setVisible(true);
        co_ii.setVisible(true);
        
        
    }//GEN-LAST:event_det_but_labActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PATIENTLOGIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PATIENTLOGIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PATIENTLOGIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PATIENTLOGIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PATIENTLOGIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel add;
    public javax.swing.JLabel age;
    public javax.swing.JLabel all;
    public javax.swing.JLabel app_date;
    public javax.swing.JLabel app_ii;
    public com.toedter.calendar.JDateChooser appointment_date;
    public javax.swing.JLabel appointment_id_lab;
    public javax.swing.JLabel appointment_label;
    public javax.swing.JScrollPane appointment_parent;
    public javax.swing.JButton appointment_submit;
    public javax.swing.JLabel available_slots_lab;
    public javax.swing.JLabel bg;
    public javax.swing.JButton bk;
    public javax.swing.JPanel book_app;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JButton check_but;
    public javax.swing.JButton check_button;
    public javax.swing.JButton check_slot;
    public javax.swing.JPanel check_symp;
    public javax.swing.JLabel co_ii;
    public javax.swing.JLabel cost_lab_info;
    public javax.swing.JPanel current_med;
    public javax.swing.JPanel current_med1;
    public javax.swing.JPanel demo;
    public javax.swing.JButton det_but_lab;
    public javax.swing.JButton det_pres_but;
    private javax.swing.JLabel disp;
    public javax.swing.JLabel dn;
    public javax.swing.JLabel dn1;
    public javax.swing.JLabel dob;
    public javax.swing.JComboBox<String> doc_combox;
    public javax.swing.JLabel doc_name;
    public javax.swing.JLabel doc_name1;
    public javax.swing.JLabel doc_name_dup;
    public javax.swing.JButton doc_search;
    public javax.swing.JLabel doc_tab_info;
    public javax.swing.JLabel docn;
    public javax.swing.JLabel docname;
    public javax.swing.JLabel dov;
    private javax.swing.JLabel dov_dup;
    public javax.swing.JLabel dov_lab;
    public javax.swing.JLabel dv;
    public javax.swing.JLabel dv1;
    public javax.swing.JRadioButton ele;
    public javax.swing.JRadioButton fiv;
    public javax.swing.JLabel follow_date;
    public javax.swing.JLabel follow_date1;
    public javax.swing.JRadioButton fou;
    public javax.swing.JLabel fud;
    public javax.swing.JLabel fud1;
    public javax.swing.JLabel gen;
    public javax.swing.JLabel hei;
    public javax.swing.JLabel impid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton8;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel may_lab;
    public javax.swing.JTable med_details;
    public javax.swing.JLabel med_lab;
    public javax.swing.JLabel medi_lab;
    public javax.swing.JScrollPane medi_parent;
    public javax.swing.JTable medicine_table;
    public javax.swing.JLabel nam;
    public javax.swing.JLabel name;
    public javax.swing.JRadioButton nin;
    public javax.swing.JLabel no_app;
    public javax.swing.JLabel no_bill_lab;
    public javax.swing.JLabel no_past_scan;
    public javax.swing.JLabel no_prescription;
    public javax.swing.JLabel no_recent_visit;
    public javax.swing.JLabel no_recent_visit1;
    public javax.swing.JLabel no_records;
    public javax.swing.JLabel no_records_test;
    public javax.swing.JLabel p_id;
    public javax.swing.JTable past_appointment;
    public javax.swing.JPanel past_bill;
    public javax.swing.JTable past_doc_bill;
    public javax.swing.JScrollPane past_doc_parent;
    public javax.swing.JPanel past_med;
    public javax.swing.JPanel past_scan;
    public javax.swing.JLabel past_scan_lab;
    public javax.swing.JScrollPane past_scan_parent;
    public javax.swing.JTable past_scan_table;
    public javax.swing.JPanel past_test;
    public javax.swing.JLabel past_test_label;
    public javax.swing.JScrollPane past_test_parent;
    public javax.swing.JTable past_test_table;
    public javax.swing.JTabbedPane patient_log_tp;
    public javax.swing.JLabel pb;
    public javax.swing.JLabel pb1;
    public javax.swing.JLabel phn;
    private java.awt.PopupMenu popupMenu1;
    public javax.swing.JLabel pro_ii;
    public javax.swing.JLabel prob;
    public javax.swing.JLabel prob1;
    private javax.swing.JLabel prob_dup;
    public javax.swing.JLabel prob_lab;
    public javax.swing.JLabel problem;
    public javax.swing.JLabel problem_lab_info;
    public javax.swing.JTextField problems;
    public javax.swing.JList<String> s;
    public javax.swing.JLabel scan_date;
    public javax.swing.JButton scan_det_report;
    public javax.swing.JLabel scan_doc;
    public javax.swing.JLabel scan_dos;
    public javax.swing.JLabel scan_sd;
    public javax.swing.JLabel scan_sugges_date;
    public javax.swing.JLabel scan_syn;
    public javax.swing.JLabel scan_synop;
    public javax.swing.JLabel scan_type;
    public javax.swing.JLabel scann;
    private javax.swing.JButton search_spec;
    public javax.swing.JLabel see_doc_lab;
    public javax.swing.JButton see_pres_but;
    private javax.swing.JComboBox<String> spe_combox;
    public javax.swing.JLabel syn;
    public javax.swing.JLabel syn1;
    private javax.swing.JLabel syn_dup;
    public javax.swing.JLabel syn_lab;
    public javax.swing.JLabel synop;
    public javax.swing.JLabel synop1;
    public javax.swing.JLabel synopsis;
    public javax.swing.JScrollPane table_parent_1;
    public javax.swing.JRadioButton ten;
    public javax.swing.JLabel test_date;
    public javax.swing.JLabel test_doc;
    public javax.swing.JLabel test_doc_name;
    public javax.swing.JLabel test_doc_type;
    public javax.swing.JLabel test_dos;
    public javax.swing.JLabel test_dot;
    public javax.swing.JButton test_report_button;
    public javax.swing.JLabel test_suggested_date;
    public javax.swing.JLabel test_syno;
    public javax.swing.JLabel test_synopsis;
    public javax.swing.JLabel test_type;
    public javax.swing.JRadioButton thr;
    public javax.swing.JLabel treatment_id;
    public javax.swing.JRadioButton twe;
    public javax.swing.JRadioButton two;
    public javax.swing.JLabel uname;
    public javax.swing.JTable upcoming_appointments;
    public javax.swing.JScrollPane upcoming_parent;
    public javax.swing.JButton view_test_button;
    public javax.swing.JLabel vis_ii;
    public javax.swing.JLabel visit_date;
    public javax.swing.JLabel visit_date1;
    public javax.swing.JLabel visit_id_info;
    public javax.swing.JLabel wei;
    // End of variables declaration//GEN-END:variables

 
    

    
    public void close()
    {
        WindowEvent winClosingEvent= new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);


    }

}
